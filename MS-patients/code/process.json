[{
  "id" : "apgqxd",
  "name" : "featureSelection",
  "description" : "jupyter",
  "code" : "{\"nbformat\":4,\"nbformat_minor\":0,\"metadata\":{\"colab\":{\"provenance\":[]},\"kernelspec\":{\"name\":\"python3\",\"display_name\":\"Python 3\"},\"language_info\":{\"name\":\"python\"}},\"cells\":[{\"cell_type\":\"code\",\"execution_count\":39,\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"MBrwfznC1w6m\",\"outputId\":\"49dee49f-3072-4866-cdfe-84890af130e0\"},\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\\\"/content/drive\\\", force_remount=True).\\n\"]}],\"source\":[\"from google.colab import drive\\n\",\"drive.mount('/content/drive')\\n\",\"import pandas as pd \\n\",\"MS_Data=pd.read_csv('drive/My Drive/Colab Notebooks/Full_iConquer_MS_All_Patients_8576_V2.csv')\"]},{\"cell_type\":\"code\",\"source\":[\"print(MS_Data.dtypes)\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_Data.info())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_Data[\\\"MSbestcharacterizes\\\"].isnull().sum())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_Data[\\\"Drug name [DrugNameCurrent]\\\"].isnull().sum())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"MS_Data.shape\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"lKj5yzJT22PI\",\"outputId\":\"4524528c-a58a-405d-e542-55e9a6daa846\"},\"execution_count\":40,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"ownerId                        object\\n\",\"FamilyMember                   object\\n\",\"MSbestcharacterizes            object\\n\",\"HeadMRIDiagnostic              object\\n\",\"SpinalcordMRIDiagnostic        object\\n\",\"                                ...  \\n\",\"WasOnTrexall                   object\\n\",\"WasOnTysabri                   object\\n\",\"WasOnZinbryta                  object\\n\",\"PossibleStoppingReasons        object\\n\",\"Drug name [DrugNameCurrent]    object\\n\",\"Length: 215, dtype: object\\n\",\"-----------------------------------------------------------------\\n\",\"<class 'pandas.core.frame.DataFrame'>\\n\",\"RangeIndex: 8576 entries, 0 to 8575\\n\",\"Columns: 215 entries, ownerId to Drug name [DrugNameCurrent]\\n\",\"dtypes: float64(126), object(89)\\n\",\"memory usage: 14.1+ MB\\n\",\"None\\n\",\"-----------------------------------------------------------------\\n\",\"5134\\n\",\"-----------------------------------------------------------------\\n\",\"6494\\n\",\"-----------------------------------------------------------------\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"(8576, 215)\"]},\"metadata\":{},\"execution_count\":40}]},{\"cell_type\":\"code\",\"source\":[\"MS_data1 = MS_Data.copy(deep=True)\\n\",\"#MS_data1.dropna(inplace=True,subset=['MSbestcharacterizes'])\\n\",\"MS_data1.drop(['ownerId'], axis=1, inplace=True)\\n\",\"MS_data1.dropna(inplace=True)\\n\",\"print(MS_data1.isnull().sum())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_data1.shape)\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_data1[\\\"MSbestcharacterizes\\\"].isnull().sum())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"MS_data1\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":800},\"id\":\"IhM-NuBo_XDh\",\"outputId\":\"00c1624e-7b8b-4e1b-bb03-10bbf017767b\"},\"execution_count\":41,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"FamilyMember                         0\\n\",\"MSbestcharacterizes                  0\\n\",\"HeadMRIDiagnostic                    0\\n\",\"SpinalcordMRIDiagnostic              0\\n\",\"NeurologicalExaminationDiagnostic    0\\n\",\"                                    ..\\n\",\"WasOnTrexall                         0\\n\",\"WasOnTysabri                         0\\n\",\"WasOnZinbryta                        0\\n\",\"PossibleStoppingReasons              0\\n\",\"Drug name [DrugNameCurrent]          0\\n\",\"Length: 214, dtype: int64\\n\",\"-----------------------------------------------------------------\\n\",\"(388, 214)\\n\",\"-----------------------------------------------------------------\\n\",\"0\\n\",\"-----------------------------------------------------------------\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"     FamilyMember MSbestcharacterizes HeadMRIDiagnostic  \\\\\\n\",\"81             No                rrms               yes   \\n\",\"82             No                rrms               yes   \\n\",\"83             No                rrms               yes   \\n\",\"297           Yes                rrms               yes   \\n\",\"298           Yes                rrms               yes   \\n\",\"...           ...                 ...               ...   \\n\",\"2075          Yes                rrms               yes   \\n\",\"2076           No                rrms               yes   \\n\",\"2078     DontKnow                rrms               yes   \\n\",\"2080           No                rrms               yes   \\n\",\"2081          Yes                rrms               yes   \\n\",\"\\n\",\"     SpinalcordMRIDiagnostic NeurologicalExaminationDiagnostic  \\\\\\n\",\"81                       yes                               yes   \\n\",\"82                       yes                               yes   \\n\",\"83                       yes                               yes   \\n\",\"297                      yes                               yes   \\n\",\"298                      yes                               yes   \\n\",\"...                      ...                               ...   \\n\",\"2075                     yes                               yes   \\n\",\"2076                     yes                               yes   \\n\",\"2078                     yes                               yes   \\n\",\"2080                     yes                               yes   \\n\",\"2081                      no                               yes   \\n\",\"\\n\",\"     SpinalFluidTestDiagnostic DiagnosticEvoked Difficultywalking1  \\\\\\n\",\"81                          no               no                  4   \\n\",\"82                          no               no                  4   \\n\",\"83                          no               no                  4   \\n\",\"297                        yes               no            1, 2, 3   \\n\",\"298                        yes               no            1, 2, 3   \\n\",\"...                        ...              ...                ...   \\n\",\"2075                        no              yes                  3   \\n\",\"2076                        no               no                  1   \\n\",\"2078                       yes               no                  3   \\n\",\"2080                       yes              yes                  4   \\n\",\"2081                       yes              yes                  4   \\n\",\"\\n\",\"     Difficulybalance Losscoordinationarm1  ... WasOnOcrevus WasOnPlegridy  \\\\\\n\",\"81            1, 2, 3                    4  ...           no            no   \\n\",\"82            1, 2, 3                    4  ...           no            no   \\n\",\"83            1, 2, 3                    4  ...           no            no   \\n\",\"297           1, 2, 3              1, 2, 3  ...           no            no   \\n\",\"298           1, 2, 3              1, 2, 3  ...           no            no   \\n\",\"...               ...                  ...  ...          ...           ...   \\n\",\"2075                3                    1  ...           no            no   \\n\",\"2076             1, 3                 1, 3  ...           no            no   \\n\",\"2078                3                    3  ...           no            no   \\n\",\"2080                4                    4  ...           no            no   \\n\",\"2081          1, 2, 3                    4  ...           no            no   \\n\",\"\\n\",\"     WasOnRebif WasOnRituxan WasOnTecfidera WasOnTrexall WasOnTysabri  \\\\\\n\",\"81          yes           no             no           no           no   \\n\",\"82          yes           no             no           no           no   \\n\",\"83          yes           no             no           no           no   \\n\",\"297          no           no             no           no           no   \\n\",\"298          no           no             no           no           no   \\n\",\"...         ...          ...            ...          ...          ...   \\n\",\"2075         no          yes             no           no           no   \\n\",\"2076         no           no             no           no           no   \\n\",\"2078         no           no             no           no           no   \\n\",\"2080         no           no             no           no           no   \\n\",\"2081         no           no             no           no           no   \\n\",\"\\n\",\"     WasOnZinbryta PossibleStoppingReasons Drug name [DrugNameCurrent]  \\n\",\"81              no         DMTSideEffects,                     Aubagio  \\n\",\"82              no         DMTSideEffects,                         LDN  \\n\",\"83              no         DMTSideEffects,            Methylprednisone  \\n\",\"297             no           NoPreviousDMT                    Copaxone  \\n\",\"298             no           NoPreviousDMT                     Tysabri  \\n\",\"...            ...                     ...                         ...  \\n\",\"2075            no             Unspecified                     Ocrevus  \\n\",\"2076            no           NoPreviousDMT                     Ocrevus  \\n\",\"2078            no             MSGotWorse,                     Rituxan  \\n\",\"2080            no           NoPreviousDMT                   Tecfidera  \\n\",\"2081            no           NoPreviousDMT                      Avonex  \\n\",\"\\n\",\"[388 rows x 214 columns]\"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-ac11238f-50ce-4c03-bcc9-39ea7ba90730\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>FamilyMember</th>\\n\",\"      <th>MSbestcharacterizes</th>\\n\",\"      <th>HeadMRIDiagnostic</th>\\n\",\"      <th>SpinalcordMRIDiagnostic</th>\\n\",\"      <th>NeurologicalExaminationDiagnostic</th>\\n\",\"      <th>SpinalFluidTestDiagnostic</th>\\n\",\"      <th>DiagnosticEvoked</th>\\n\",\"      <th>Difficultywalking1</th>\\n\",\"      <th>Difficulybalance</th>\\n\",\"      <th>Losscoordinationarm1</th>\\n\",\"      <th>...</th>\\n\",\"      <th>WasOnOcrevus</th>\\n\",\"      <th>WasOnPlegridy</th>\\n\",\"      <th>WasOnRebif</th>\\n\",\"      <th>WasOnRituxan</th>\\n\",\"      <th>WasOnTecfidera</th>\\n\",\"      <th>WasOnTrexall</th>\\n\",\"      <th>WasOnTysabri</th>\\n\",\"      <th>WasOnZinbryta</th>\\n\",\"      <th>PossibleStoppingReasons</th>\\n\",\"      <th>Drug name [DrugNameCurrent]</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>81</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>DMTSideEffects,</td>\\n\",\"      <td>Aubagio</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>82</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>DMTSideEffects,</td>\\n\",\"      <td>LDN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>83</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>DMTSideEffects,</td>\\n\",\"      <td>Methylprednisone</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>297</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NoPreviousDMT</td>\\n\",\"      <td>Copaxone</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>298</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NoPreviousDMT</td>\\n\",\"      <td>Tysabri</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>...</th>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2075</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Unspecified</td>\\n\",\"      <td>Ocrevus</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2076</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NoPreviousDMT</td>\\n\",\"      <td>Ocrevus</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2078</th>\\n\",\"      <td>DontKnow</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>MSGotWorse,</td>\\n\",\"      <td>Rituxan</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2080</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>4</td>\\n\",\"      <td>4</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NoPreviousDMT</td>\\n\",\"      <td>Tecfidera</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2081</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NoPreviousDMT</td>\\n\",\"      <td>Avonex</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"<p>388 rows × 214 columns</p>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-ac11238f-50ce-4c03-bcc9-39ea7ba90730')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-ac11238f-50ce-4c03-bcc9-39ea7ba90730 button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-ac11238f-50ce-4c03-bcc9-39ea7ba90730');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":41}]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.preprocessing import LabelEncoder\\n\",\"from sklearn.preprocessing import OrdinalEncoder\\n\",\"\\n\",\"MS_data1=MS_data1.astype(str)\\n\",\"\\n\",\"categs_feats = MS_data1[MS_data1.columns.difference(['MSbestcharacterizes'])] #Drug name [DrugNameCurrent]\\n\",\"encoder = OrdinalEncoder()\\n\",\"categs_encoded = encoder.fit_transform(categs_feats)\\n\",\"MS_data1[MS_data1.columns.difference(['MSbestcharacterizes'])] = pd.DataFrame(categs_encoded, columns=categs_feats.columns, index=categs_feats.index).astype(int)\\n\",\"\\n\",\"label_feat = MS_data1[['MSbestcharacterizes']] #Drug name [DrugNameCurrent]\\n\",\"label_encoder = LabelEncoder()\\n\",\"label_encoded = label_encoder.fit_transform(label_feat)\\n\",\"MS_data1[['MSbestcharacterizes']]= pd.DataFrame(label_encoded, columns=label_feat.columns, index=label_feat.index) #Drug name [DrugNameCurrent]\\n\",\"MS_data1\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":540},\"id\":\"AyN1TaS_JwVl\",\"outputId\":\"269d879e-ad2f-4d2a-b530-9580da0ad773\"},\"execution_count\":42,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stderr\",\"text\":[\"/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_label.py:115: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\\n\",\"  y = column_or_1d(y, warn=True)\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"      FamilyMember  MSbestcharacterizes  HeadMRIDiagnostic  \\\\\\n\",\"81               1                    4                  1   \\n\",\"82               1                    4                  1   \\n\",\"83               1                    4                  1   \\n\",\"297              2                    4                  1   \\n\",\"298              2                    4                  1   \\n\",\"...            ...                  ...                ...   \\n\",\"2075             2                    4                  1   \\n\",\"2076             1                    4                  1   \\n\",\"2078             0                    4                  1   \\n\",\"2080             1                    4                  1   \\n\",\"2081             2                    4                  1   \\n\",\"\\n\",\"      SpinalcordMRIDiagnostic  NeurologicalExaminationDiagnostic  \\\\\\n\",\"81                          1                                  1   \\n\",\"82                          1                                  1   \\n\",\"83                          1                                  1   \\n\",\"297                         1                                  1   \\n\",\"298                         1                                  1   \\n\",\"...                       ...                                ...   \\n\",\"2075                        1                                  1   \\n\",\"2076                        1                                  1   \\n\",\"2078                        1                                  1   \\n\",\"2080                        1                                  1   \\n\",\"2081                        0                                  1   \\n\",\"\\n\",\"      SpinalFluidTestDiagnostic  DiagnosticEvoked  Difficultywalking1  \\\\\\n\",\"81                            0                 0                   7   \\n\",\"82                            0                 0                   7   \\n\",\"83                            0                 0                   7   \\n\",\"297                           1                 0                   2   \\n\",\"298                           1                 0                   2   \\n\",\"...                         ...               ...                 ...   \\n\",\"2075                          0                 1                   6   \\n\",\"2076                          0                 0                   0   \\n\",\"2078                          1                 0                   6   \\n\",\"2080                          1                 1                   7   \\n\",\"2081                          1                 1                   7   \\n\",\"\\n\",\"      Difficulybalance  Losscoordinationarm1  ...  WasOnOcrevus  \\\\\\n\",\"81                   2                     8  ...             0   \\n\",\"82                   2                     8  ...             0   \\n\",\"83                   2                     8  ...             0   \\n\",\"297                  2                     2  ...             0   \\n\",\"298                  2                     2  ...             0   \\n\",\"...                ...                   ...  ...           ...   \\n\",\"2075                 6                     0  ...             0   \\n\",\"2076                 3                     3  ...             0   \\n\",\"2078                 6                     7  ...             0   \\n\",\"2080                 7                     8  ...             0   \\n\",\"2081                 2                     8  ...             0   \\n\",\"\\n\",\"      WasOnPlegridy  WasOnRebif  WasOnRituxan  WasOnTecfidera  WasOnTrexall  \\\\\\n\",\"81                0           1             0               0             0   \\n\",\"82                0           1             0               0             0   \\n\",\"83                0           1             0               0             0   \\n\",\"297               0           0             0               0             0   \\n\",\"298               0           0             0               0             0   \\n\",\"...             ...         ...           ...             ...           ...   \\n\",\"2075              0           0             1               0             0   \\n\",\"2076              0           0             0               0             0   \\n\",\"2078              0           0             0               0             0   \\n\",\"2080              0           0             0               0             0   \\n\",\"2081              0           0             0               0             0   \\n\",\"\\n\",\"      WasOnTysabri  WasOnZinbryta  PossibleStoppingReasons  \\\\\\n\",\"81               0              0                        4   \\n\",\"82               0              0                        4   \\n\",\"83               0              0                        4   \\n\",\"297              0              0                       14   \\n\",\"298              0              0                       14   \\n\",\"...            ...            ...                      ...   \\n\",\"2075             0              0                       17   \\n\",\"2076             0              0                       14   \\n\",\"2078             0              0                       10   \\n\",\"2080             0              0                       14   \\n\",\"2081             0              0                       14   \\n\",\"\\n\",\"      Drug name [DrugNameCurrent]  \\n\",\"81                              1  \\n\",\"82                             12  \\n\",\"83                             17  \\n\",\"297                             6  \\n\",\"298                            24  \\n\",\"...                           ...  \\n\",\"2075                           18  \\n\",\"2076                           18  \\n\",\"2078                           22  \\n\",\"2080                           23  \\n\",\"2081                            2  \\n\",\"\\n\",\"[388 rows x 214 columns]\"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-21334420-5bac-4cb9-b2c1-88eb6f979cc1\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>FamilyMember</th>\\n\",\"      <th>MSbestcharacterizes</th>\\n\",\"      <th>HeadMRIDiagnostic</th>\\n\",\"      <th>SpinalcordMRIDiagnostic</th>\\n\",\"      <th>NeurologicalExaminationDiagnostic</th>\\n\",\"      <th>SpinalFluidTestDiagnostic</th>\\n\",\"      <th>DiagnosticEvoked</th>\\n\",\"      <th>Difficultywalking1</th>\\n\",\"      <th>Difficulybalance</th>\\n\",\"      <th>Losscoordinationarm1</th>\\n\",\"      <th>...</th>\\n\",\"      <th>WasOnOcrevus</th>\\n\",\"      <th>WasOnPlegridy</th>\\n\",\"      <th>WasOnRebif</th>\\n\",\"      <th>WasOnRituxan</th>\\n\",\"      <th>WasOnTecfidera</th>\\n\",\"      <th>WasOnTrexall</th>\\n\",\"      <th>WasOnTysabri</th>\\n\",\"      <th>WasOnZinbryta</th>\\n\",\"      <th>PossibleStoppingReasons</th>\\n\",\"      <th>Drug name [DrugNameCurrent]</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>81</th>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>7</td>\\n\",\"      <td>2</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>82</th>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>7</td>\\n\",\"      <td>2</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>12</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>83</th>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>7</td>\\n\",\"      <td>2</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>17</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>297</th>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>14</td>\\n\",\"      <td>6</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>298</th>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>14</td>\\n\",\"      <td>24</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>...</th>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2075</th>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>6</td>\\n\",\"      <td>6</td>\\n\",\"      <td>0</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>17</td>\\n\",\"      <td>18</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2076</th>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>14</td>\\n\",\"      <td>18</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2078</th>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>6</td>\\n\",\"      <td>6</td>\\n\",\"      <td>7</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>10</td>\\n\",\"      <td>22</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2080</th>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>7</td>\\n\",\"      <td>7</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>14</td>\\n\",\"      <td>23</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2081</th>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>7</td>\\n\",\"      <td>2</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>14</td>\\n\",\"      <td>2</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"<p>388 rows × 214 columns</p>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-21334420-5bac-4cb9-b2c1-88eb6f979cc1')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-21334420-5bac-4cb9-b2c1-88eb6f979cc1 button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-21334420-5bac-4cb9-b2c1-88eb6f979cc1');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":42}]},{\"cell_type\":\"code\",\"source\":[\"import numpy as np\\n\",\"from sklearn.model_selection import train_test_split\\n\",\"\\n\",\"X1 = MS_data1.drop('MSbestcharacterizes', axis=1) #Drug name [DrugNameCurrent]\\n\",\"y1 = MS_data1['MSbestcharacterizes'] #Drug name [DrugNameCurrent]\\n\",\"X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, random_state=123, test_size=0.20)\\n\",\"\\n\",\"X2 = MS_data1.drop('MSbestcharacterizes', axis=1) #Drug name [DrugNameCurrent]\\n\",\"y2 = MS_data1['MSbestcharacterizes'] #Drug name [DrugNameCurrent]\\n\",\"X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, random_state=123, test_size=0.30)\"],\"metadata\":{\"id\":\"90WldlH9rNiG\"},\"execution_count\":43,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\\n\",\"from sklearn.model_selection import train_test_split\\n\",\"import matplotlib.pyplot as plt\\n\",\"from sklearn.metrics import accuracy_score\\n\",\"from sklearn.feature_selection import SelectFromModel\\n\",\"\\n\",\"\\n\",\"np.random.seed(0)\\n\",\"rf1 = RandomForestClassifier()\\n\",\"rf1.fit(X1_train,y1_train)\\n\",\"rf1_pred = rf1.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, rf1_pred)\\n\",\"print('The test accuracy of RF1 is {0:5.2f} %'.format(accuracy*100))\\n\",\"\\n\",\"np.random.seed(0)\\n\",\"rf2 = RandomForestClassifier()\\n\",\"rf2.fit(X2_train,y2_train)\\n\",\"rf2_pred = rf2.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, rf2_pred)\\n\",\"print('The test accuracy of RF2 is {0:5.2f} %'.format(accuracy*100))\\n\",\"\\n\",\"np.random.seed(0)\\n\",\"dt1 = ExtraTreesClassifier()\\n\",\"dt1.fit(X1_train,y1_train)\\n\",\"dt1_pred = dt1.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, dt1_pred)\\n\",\"print('The test accuracy of DT1 is {0:5.2f} %'.format(accuracy*100))\\n\",\"\\n\",\"np.random.seed(0)\\n\",\"dt2 = ExtraTreesClassifier()\\n\",\"dt2.fit(X2_train,y2_train)\\n\",\"dt2_pred = rf1.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, dt2_pred)\\n\",\"print('The test accuracy of DT2 is {0:5.2f} %'.format(accuracy*100))\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"n-osTKAZ9haA\",\"outputId\":\"256383ab-1bab-4dd0-8a71-16410d99de69\"},\"execution_count\":44,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"The test accuracy of RF1 is 82.05 %\\n\",\"The test accuracy of RF2 is 77.78 %\\n\",\"The test accuracy of DT1 is 79.49 %\\n\",\"The test accuracy of DT2 is 88.03 %\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"f_i = list(zip(list(MS_data1.columns),dt2.feature_importances_))\\n\",\"f_i.sort(key = lambda x : x[1])\\n\",\"#plt.figure(figsize=(20,20))\\n\",\"plt.rcParams['figure.figsize'] = (10, 50)\\n\",\"plt.barh([x[0] for x in f_i],[x[1] for x in f_i])\\n\",\"plt.show()\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":1000},\"id\":\"ca7nHxfACd6j\",\"outputId\":\"4187fa82-279a-40d7-c6b2-c565b5d8a36d\"},\"execution_count\":26,\"outputs\":[{\"output_type\":\"display_data\",\"data\":{\"text/plain\":[\"<Figure size 720x3600 with 1 Axes>\"],\"image/png\":\"\\n\"},\"metadata\":{\"needs_background\":\"light\"}}]},{\"cell_type\":\"code\",\"source\":[\"model = SelectFromModel(dt2, prefit=True) #,threshold=0.0055\\n\",\"#feature_idx = model.get_support()\\n\",\"#feature_name = df.columns[feature_idx]\\n\",\"#feature_name = model.get_feature_names_out()\\n\",\"#feature_name\\n\",\"feature_idx = model.get_support()\\n\",\"feature_name = X2.columns[feature_idx]\\n\",\"print(feature_name.shape)\\n\",\"list(feature_name)\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"g6qt1ON5gFl2\",\"outputId\":\"8e74d152-4e8e-4837-b68a-7e8bd8a6d466\"},\"execution_count\":45,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"(104,)\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"['DiagnosticEvoked',\\n\",\" 'Difficultywalking1',\\n\",\" 'Difficulybalance',\\n\",\" 'Shaking1',\\n\",\" 'Stiffness1',\\n\",\" 'Weaknessarms',\\n\",\" 'Weaknesslegs1',\\n\",\" 'Blindness1',\\n\",\" 'Disturbedvision',\\n\",\" 'FacialTwitching',\\n\",\" 'Sensory11_NoPain',\\n\",\" 'Sensory11Pain',\\n\",\" 'Burningsensationfeet',\\n\",\" 'CognitiveDifficulties',\\n\",\" 'Electricshockfeeling',\\n\",\" 'Itching1',\\n\",\" 'Vertigo1',\\n\",\" 'Armstotalparalysis',\\n\",\" 'Depression',\\n\",\" 'Fatigue2',\\n\",\" 'Legstotalparalysis',\\n\",\" 'MechanicalVentilation',\\n\",\" 'RestlessLeg',\\n\",\" 'Troublebowelmovements1',\\n\",\" 'SCQ ulcer stomach',\\n\",\" 'SCQ osteoarthritis',\\n\",\" 'SCQ back pain',\\n\",\" 'High cholesterol',\\n\",\" 'SCQ osteoporosis added Aug2019',\\n\",\" 'Global01',\\n\",\" 'Global02',\\n\",\" 'Global03',\\n\",\" 'Global04',\\n\",\" 'Global05',\\n\",\" 'Global09',\\n\",\" 'Global06',\\n\",\" 'Global10',\\n\",\" 'Global08',\\n\",\" 'Global07',\\n\",\" 'PDDSChoice',\\n\",\" 'NQCOG01',\\n\",\" 'NQCOG08',\\n\",\" 'NQCOG10',\\n\",\" 'NQPRF01',\\n\",\" 'NQPRF03',\\n\",\" 'NQPRF17',\\n\",\" 'NQPRF26',\\n\",\" 'NQPRF34',\\n\",\" 'EDANX46',\\n\",\" 'EDANX55',\\n\",\" 'NQANX07',\\n\",\" 'NQPER07',\\n\",\" 'NQFTG06',\\n\",\" 'NQFTG07',\\n\",\" 'NQFTG13',\\n\",\" 'NQFTG14',\\n\",\" 'NQFTG15',\\n\",\" 'PFA23',\\n\",\" 'PFA30',\\n\",\" 'PFA31',\\n\",\" 'PFA45',\\n\",\" 'PFA53',\\n\",\" 'PFA56',\\n\",\" 'PFC45',\\n\",\" 'NQPPF15',\\n\",\" 'NQPPF16',\\n\",\" 'NQPPF17',\\n\",\" 'NQPPF20',\\n\",\" 'NQPPF22',\\n\",\" 'NQSAT03',\\n\",\" 'NQSAT11',\\n\",\" 'NQSAT14',\\n\",\" 'NQSAT23',\\n\",\" 'NQSAT46',\\n\",\" 'SRPSAT05',\\n\",\" 'SRPSAT07',\\n\",\" 'SRPSAT33',\\n\",\" 'NQSLP02',\\n\",\" 'NQSLP03',\\n\",\" 'NQSLP04',\\n\",\" 'NQSLP07',\\n\",\" 'NQSLP12',\\n\",\" 'NQSLP18',\\n\",\" 'NQSTG04',\\n\",\" 'NQSTG08',\\n\",\" 'NQSTG17',\\n\",\" 'NQSTG21',\\n\",\" 'PFA40',\\n\",\" 'PFA43',\\n\",\" 'PFB26',\\n\",\" 'NQCOG64',\\n\",\" 'NQCOG75',\\n\",\" 'NQCOG22',\\n\",\" 'BLCS_AlteredActivities',\\n\",\" 'BLCS_LostControl',\\n\",\" 'BWCS_AlteredActivities',\\n\",\" 'BWCS_Constipated',\\n\",\" 'BWCS_Lifestyle',\\n\",\" 'IVIS_Dials',\\n\",\" 'IVIS_HouseNumbers',\\n\",\" 'IVIS_LettersNotes',\\n\",\" 'IVIS_PrintedMaterial',\\n\",\" 'WasOnAvonex',\\n\",\" 'Drug name [DrugNameCurrent]']\"]},\"metadata\":{},\"execution_count\":45}]},{\"cell_type\":\"code\",\"source\":[\"#X_new = model.transform(X2)\\n\",\"pd.DataFrame(feature_name).to_csv('drive/My Drive/Colab Notebooks/features.csv', index=False)\"],\"metadata\":{\"id\":\"HPPOwc7QAbxP\"},\"execution_count\":46,\"outputs\":[]}]}",
  "lang" : "jupyter",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "bgqxwl",
  "name" : "missingValueImputation",
  "description" : "jupyter",
  "code" : "{\"nbformat\":4,\"nbformat_minor\":0,\"metadata\":{\"colab\":{\"provenance\":[]},\"kernelspec\":{\"name\":\"python3\",\"display_name\":\"Python 3\"},\"language_info\":{\"name\":\"python\"}},\"cells\":[{\"cell_type\":\"code\",\"execution_count\":56,\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"o-pBhtSzGPqK\",\"outputId\":\"4a81ab78-9819-4b8f-fb86-cd6339366d8f\"},\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\\\"/content/drive\\\", force_remount=True).\\n\"]},{\"output_type\":\"stream\",\"name\":\"stderr\",\"text\":[\"/usr/local/lib/python3.8/dist-packages/IPython/core/interactiveshell.py:3326: DtypeWarning: Columns (36,214) have mixed types.Specify dtype option on import or set low_memory=False.\\n\",\"  exec(code_obj, self.user_global_ns, self.user_ns)\\n\"]}],\"source\":[\"from google.colab import drive\\n\",\"drive.mount('/content/drive')\\n\",\"import pandas as pd \\n\",\"MS_Data=pd.read_csv('drive/My Drive/Colab Notebooks/Full_iConquer_MS_All_Patients_8576_V3.csv')\"]},{\"cell_type\":\"code\",\"source\":[\"MS_data1 = MS_Data.copy(deep=True)\\n\",\"MS_data1.drop(['ownerId'], axis=1, inplace=True)\\n\",\"#MS_data1.dropna(inplace=True,subset=['Drug name [DrugNameCurrent]'])\\n\",\"MS_data1.dropna(inplace=True,subset=['MSbestcharacterizes'])\\n\",\"print(MS_data1.isnull().sum())\\n\",\"print(\\\"-----------------------------------------------------------------\\\")\\n\",\"print(MS_data1.shape)\\n\",\"MS_data1\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":748},\"id\":\"sVjaOBVcGu4o\",\"outputId\":\"dfee600b-b221-4465-8b22-5e028b715360\"},\"execution_count\":57,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"FamilyMember                            0\\n\",\"MSbestcharacterizes                     0\\n\",\"HeadMRIDiagnostic                       3\\n\",\"SpinalcordMRIDiagnostic                 3\\n\",\"NeurologicalExaminationDiagnostic       3\\n\",\"                                     ... \\n\",\"WasOnTrexall                         1098\\n\",\"WasOnTysabri                         1098\\n\",\"WasOnZinbryta                        1098\\n\",\"PossibleStoppingReasons              1098\\n\",\"Drug name [DrugNameCurrent]          1363\\n\",\"Length: 214, dtype: int64\\n\",\"-----------------------------------------------------------------\\n\",\"(3442, 214)\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"     FamilyMember MSbestcharacterizes HeadMRIDiagnostic  \\\\\\n\",\"0              No                spms               yes   \\n\",\"1              No                spms               yes   \\n\",\"2             Yes                rrms               yes   \\n\",\"3             Yes                rrms               yes   \\n\",\"4              No                spms               yes   \\n\",\"...           ...                 ...               ...   \\n\",\"8536          Yes                 CIS                no   \\n\",\"8558           No                rrms               yes   \\n\",\"8559          Yes                ppms               yes   \\n\",\"8562          Yes                ppms               yes   \\n\",\"8564           No                rrms                no   \\n\",\"\\n\",\"     SpinalcordMRIDiagnostic NeurologicalExaminationDiagnostic  \\\\\\n\",\"0                         no                                no   \\n\",\"1                         no                                no   \\n\",\"2                         no                               yes   \\n\",\"3                         no                               yes   \\n\",\"4                         no                               yes   \\n\",\"...                      ...                               ...   \\n\",\"8536                     yes                                no   \\n\",\"8558                     yes                               yes   \\n\",\"8559                     yes                               yes   \\n\",\"8562                     yes                               yes   \\n\",\"8564                      no                               yes   \\n\",\"\\n\",\"     SpinalFluidTestDiagnostic DiagnosticEvoked Difficultywalking1  \\\\\\n\",\"0                          yes              yes               2, 3   \\n\",\"1                          yes              yes               2, 3   \\n\",\"2                          yes               no               1, 3   \\n\",\"3                          yes               no               1, 3   \\n\",\"4                          yes              yes                  3   \\n\",\"...                        ...              ...                ...   \\n\",\"8536                       yes               no                NaN   \\n\",\"8558                       yes               no                  4   \\n\",\"8559                        no               no                  4   \\n\",\"8562                       yes              yes                  3   \\n\",\"8564                        no              yes               1, 3   \\n\",\"\\n\",\"     Difficulybalance Losscoordinationarm1  ... WasOnOcrevus WasOnPlegridy  \\\\\\n\",\"0                   3                    3  ...           no            no   \\n\",\"1                   3                    3  ...           no            no   \\n\",\"2                1, 3                    4  ...           no            no   \\n\",\"3                1, 3                    4  ...           no            no   \\n\",\"4                   1                    1  ...          NaN           NaN   \\n\",\"...               ...                  ...  ...          ...           ...   \\n\",\"8536              NaN                  NaN  ...          NaN           NaN   \\n\",\"8558                2                    4  ...          NaN           NaN   \\n\",\"8559                3                    4  ...          NaN           NaN   \\n\",\"8562                3                    3  ...          NaN           NaN   \\n\",\"8564             1, 3                    1  ...           no            no   \\n\",\"\\n\",\"     WasOnRebif WasOnRituxan WasOnTecfidera WasOnTrexall WasOnTysabri  \\\\\\n\",\"0            no           no            yes           no           no   \\n\",\"1            no           no            yes           no           no   \\n\",\"2           yes           no            yes           no           no   \\n\",\"3           yes           no            yes           no           no   \\n\",\"4           NaN          NaN            NaN          NaN          NaN   \\n\",\"...         ...          ...            ...          ...          ...   \\n\",\"8536        NaN          NaN            NaN          NaN          NaN   \\n\",\"8558        NaN          NaN            NaN          NaN          NaN   \\n\",\"8559        NaN          NaN            NaN          NaN          NaN   \\n\",\"8562        NaN          NaN            NaN          NaN          NaN   \\n\",\"8564         no           no             no           no           no   \\n\",\"\\n\",\"     WasOnZinbryta PossibleStoppingReasons Drug name [DrugNameCurrent]  \\n\",\"0               no             Unspecified                     Rituxan  \\n\",\"1               no             Unspecified                       Rebif  \\n\",\"2               no             Unspecified                         LDN  \\n\",\"3               no             Unspecified                    Plegridy  \\n\",\"4              NaN                     NaN                    Copaxone  \\n\",\"...            ...                     ...                         ...  \\n\",\"8536           NaN                     NaN                         NaN  \\n\",\"8558           NaN                     NaN                         NaN  \\n\",\"8559           NaN                     NaN                         NaN  \\n\",\"8562           NaN                     NaN                         NaN  \\n\",\"8564            no         DMTSideEffects,                         NaN  \\n\",\"\\n\",\"[3442 rows x 214 columns]\"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-96f18de2-b421-4979-94fa-6658d4586f5c\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>FamilyMember</th>\\n\",\"      <th>MSbestcharacterizes</th>\\n\",\"      <th>HeadMRIDiagnostic</th>\\n\",\"      <th>SpinalcordMRIDiagnostic</th>\\n\",\"      <th>NeurologicalExaminationDiagnostic</th>\\n\",\"      <th>SpinalFluidTestDiagnostic</th>\\n\",\"      <th>DiagnosticEvoked</th>\\n\",\"      <th>Difficultywalking1</th>\\n\",\"      <th>Difficulybalance</th>\\n\",\"      <th>Losscoordinationarm1</th>\\n\",\"      <th>...</th>\\n\",\"      <th>WasOnOcrevus</th>\\n\",\"      <th>WasOnPlegridy</th>\\n\",\"      <th>WasOnRebif</th>\\n\",\"      <th>WasOnRituxan</th>\\n\",\"      <th>WasOnTecfidera</th>\\n\",\"      <th>WasOnTrexall</th>\\n\",\"      <th>WasOnTysabri</th>\\n\",\"      <th>WasOnZinbryta</th>\\n\",\"      <th>PossibleStoppingReasons</th>\\n\",\"      <th>Drug name [DrugNameCurrent]</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>0</th>\\n\",\"      <td>No</td>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Unspecified</td>\\n\",\"      <td>Rituxan</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>1</th>\\n\",\"      <td>No</td>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Unspecified</td>\\n\",\"      <td>Rebif</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Unspecified</td>\\n\",\"      <td>LDN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Unspecified</td>\\n\",\"      <td>Plegridy</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>4</th>\\n\",\"      <td>No</td>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>Copaxone</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>...</th>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8536</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>CIS</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8558</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8559</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>ppms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8562</th>\\n\",\"      <td>Yes</td>\\n\",\"      <td>ppms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8564</th>\\n\",\"      <td>No</td>\\n\",\"      <td>rrms</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>no</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>...</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>no</td>\\n\",\"      <td>DMTSideEffects,</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"<p>3442 rows × 214 columns</p>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-96f18de2-b421-4979-94fa-6658d4586f5c')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-96f18de2-b421-4979-94fa-6658d4586f5c button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-96f18de2-b421-4979-94fa-6658d4586f5c');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":57}]},{\"cell_type\":\"code\",\"source\":[\"features=pd.read_csv('drive/My Drive/Colab Notebooks/features.csv')\"],\"metadata\":{\"id\":\"hAnRTl6WVL4k\"},\"execution_count\":58,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"for col in MS_data1:\\n\",\"  if col not in features.columns and col!='MSbestcharacterizes':\\n\",\"    MS_data1.drop([col], axis=1, inplace=True)\\n\",\"MS_data1\\n\",\"#Drug name [DrugNameCurrent]\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":505},\"id\":\"c2JCMqKCen9x\",\"outputId\":\"6ad1b4a4-8072-45b8-8f30-f6e657f553c2\"},\"execution_count\":59,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"     MSbestcharacterizes DiagnosticEvoked Difficultywalking1 Difficulybalance  \\\\\\n\",\"0                   spms              yes               2, 3                3   \\n\",\"1                   spms              yes               2, 3                3   \\n\",\"2                   rrms               no               1, 3             1, 3   \\n\",\"3                   rrms               no               1, 3             1, 3   \\n\",\"4                   spms              yes                  3                1   \\n\",\"...                  ...              ...                ...              ...   \\n\",\"8536                 CIS               no                NaN              NaN   \\n\",\"8558                rrms               no                  4                2   \\n\",\"8559                ppms               no                  4                3   \\n\",\"8562                ppms              yes                  3                3   \\n\",\"8564                rrms              yes               1, 3             1, 3   \\n\",\"\\n\",\"     Shaking1 Stiffness1 Weaknessarms Weaknesslegs1 Blindness1  \\\\\\n\",\"0           1          2            3          2, 3       2, 3   \\n\",\"1           1          2            3          2, 3       2, 3   \\n\",\"2           1       1, 3            4             1       1, 2   \\n\",\"3           1       1, 3            4             1       1, 2   \\n\",\"4           4          1            1          1, 3    1, 2, 3   \\n\",\"...       ...        ...          ...           ...        ...   \\n\",\"8536      NaN        NaN          NaN           NaN        NaN   \\n\",\"8558        4          2            4             4          2   \\n\",\"8559        4          3            3             3          4   \\n\",\"8562        3          3            3             3          4   \\n\",\"8564        4       1, 3            4             1          1   \\n\",\"\\n\",\"     Disturbedvision  ... BLCS_LostControl BWCS_AlteredActivities  \\\\\\n\",\"0               2, 3  ...              NaN                    NaN   \\n\",\"1               2, 3  ...              NaN                    NaN   \\n\",\"2                  4  ...              NaN                    NaN   \\n\",\"3                  4  ...              NaN                    NaN   \\n\",\"4               1, 2  ...              NaN                    NaN   \\n\",\"...              ...  ...              ...                    ...   \\n\",\"8536             NaN  ...              NaN                    NaN   \\n\",\"8558               2  ...              NaN                    NaN   \\n\",\"8559               4  ...              NaN                    NaN   \\n\",\"8562               4  ...              2.0                    2.0   \\n\",\"8564               4  ...              NaN                    NaN   \\n\",\"\\n\",\"     BWCS_Constipated BWCS_Lifestyle IVIS_Dials IVIS_HouseNumbers  \\\\\\n\",\"0                 NaN            NaN        NaN               NaN   \\n\",\"1                 NaN            NaN        NaN               NaN   \\n\",\"2                 NaN            NaN        NaN               NaN   \\n\",\"3                 NaN            NaN        NaN               NaN   \\n\",\"4                 NaN            NaN        NaN               NaN   \\n\",\"...               ...            ...        ...               ...   \\n\",\"8536              NaN            NaN        NaN               NaN   \\n\",\"8558              NaN            NaN        NaN               NaN   \\n\",\"8559              NaN            NaN        NaN               NaN   \\n\",\"8562              0.0            5.0        1.0               2.0   \\n\",\"8564              NaN            NaN        NaN               NaN   \\n\",\"\\n\",\"     IVIS_LettersNotes IVIS_PrintedMaterial WasOnAvonex  \\\\\\n\",\"0                  NaN                  NaN         yes   \\n\",\"1                  NaN                  NaN         yes   \\n\",\"2                  NaN                  NaN          no   \\n\",\"3                  NaN                  NaN          no   \\n\",\"4                  NaN                  NaN         NaN   \\n\",\"...                ...                  ...         ...   \\n\",\"8536               NaN                  NaN         NaN   \\n\",\"8558               NaN                  NaN         NaN   \\n\",\"8559               NaN                  NaN         NaN   \\n\",\"8562               1.0                  1.0         NaN   \\n\",\"8564               NaN                  NaN          no   \\n\",\"\\n\",\"     Drug name [DrugNameCurrent]  \\n\",\"0                        Rituxan  \\n\",\"1                          Rebif  \\n\",\"2                            LDN  \\n\",\"3                       Plegridy  \\n\",\"4                       Copaxone  \\n\",\"...                          ...  \\n\",\"8536                         NaN  \\n\",\"8558                         NaN  \\n\",\"8559                         NaN  \\n\",\"8562                         NaN  \\n\",\"8564                         NaN  \\n\",\"\\n\",\"[3442 rows x 105 columns]\"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-f94e03e4-0318-47d3-bcc4-fff813045edd\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>MSbestcharacterizes</th>\\n\",\"      <th>DiagnosticEvoked</th>\\n\",\"      <th>Difficultywalking1</th>\\n\",\"      <th>Difficulybalance</th>\\n\",\"      <th>Shaking1</th>\\n\",\"      <th>Stiffness1</th>\\n\",\"      <th>Weaknessarms</th>\\n\",\"      <th>Weaknesslegs1</th>\\n\",\"      <th>Blindness1</th>\\n\",\"      <th>Disturbedvision</th>\\n\",\"      <th>...</th>\\n\",\"      <th>BLCS_LostControl</th>\\n\",\"      <th>BWCS_AlteredActivities</th>\\n\",\"      <th>BWCS_Constipated</th>\\n\",\"      <th>BWCS_Lifestyle</th>\\n\",\"      <th>IVIS_Dials</th>\\n\",\"      <th>IVIS_HouseNumbers</th>\\n\",\"      <th>IVIS_LettersNotes</th>\\n\",\"      <th>IVIS_PrintedMaterial</th>\\n\",\"      <th>WasOnAvonex</th>\\n\",\"      <th>Drug name [DrugNameCurrent]</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>0</th>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>2</td>\\n\",\"      <td>3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>Rituxan</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>1</th>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>2</td>\\n\",\"      <td>3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>2, 3</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>Rebif</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2</th>\\n\",\"      <td>rrms</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>no</td>\\n\",\"      <td>LDN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3</th>\\n\",\"      <td>rrms</td>\\n\",\"      <td>no</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>no</td>\\n\",\"      <td>Plegridy</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>4</th>\\n\",\"      <td>spms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>3</td>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 2, 3</td>\\n\",\"      <td>1, 2</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>Copaxone</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>...</th>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8536</th>\\n\",\"      <td>CIS</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8558</th>\\n\",\"      <td>rrms</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>2</td>\\n\",\"      <td>4</td>\\n\",\"      <td>4</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8559</th>\\n\",\"      <td>ppms</td>\\n\",\"      <td>no</td>\\n\",\"      <td>4</td>\\n\",\"      <td>3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8562</th>\\n\",\"      <td>ppms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2.0</td>\\n\",\"      <td>2.0</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>5.0</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>2.0</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>8564</th>\\n\",\"      <td>rrms</td>\\n\",\"      <td>yes</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1, 3</td>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>4</td>\\n\",\"      <td>...</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>no</td>\\n\",\"      <td>NaN</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"<p>3442 rows × 105 columns</p>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-f94e03e4-0318-47d3-bcc4-fff813045edd')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-f94e03e4-0318-47d3-bcc4-fff813045edd button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-f94e03e4-0318-47d3-bcc4-fff813045edd');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":59}]},{\"cell_type\":\"code\",\"source\":[\"x= MS_data1[MS_data1.columns[:]]\\n\",\"x\"],\"metadata\":{\"id\":\"QdGr67NV1fIH\"},\"execution_count\":null,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"import numpy as np\\n\",\"from sklearn.impute import KNNImputer\\n\",\"from sklearn.preprocessing import MinMaxScaler\\n\",\"\\n\",\"mm = MinMaxScaler()\\n\",\"\\n\",\"def find_category_mappings(df, variable):\\n\",\"    return {k: i for i, k in enumerate(df[variable].dropna().unique(), 0)}\\n\",\"\\n\",\"def integer_encode(df , variable, ordinal_mapping):\\n\",\"    df[variable] = df[variable].map(ordinal_mapping)\\n\",\"\\n\",\"mappin = dict()\\n\",\"def imputation(df1 , cols):\\n\",\"    df = df1.copy()\\n\",\"    #Encoding dict &amp; Removing nan    \\n\",\"    #mappin = dict()\\n\",\"    for variable in cols:\\n\",\"        mappings = find_category_mappings(df, variable)\\n\",\"        mappin[variable] = mappings\\n\",\"\\n\",\"    #Apply mapping\\n\",\"    for variable in cols:\\n\",\"        integer_encode(df, variable, mappin[variable])  \\n\",\"\\n\",\"    #Minmaxscaler and KNN imputation \\n\",\"    sca = mm.fit_transform(df)\\n\",\"    knn_imputer = KNNImputer()\\n\",\"    knn = knn_imputer.fit_transform(sca)\\n\",\"    df.iloc[:,:] = mm.inverse_transform(knn)\\n\",\"    for i in df.columns : \\n\",\"        df[i] = round(df[i]).astype('int')\\n\",\"\\n\",\"    #Inverse transform\\n\",\"    for i in cols:\\n\",\"        inv_map = {v: k for k, v in mappin[i].items()}\\n\",\"        df[i] = df[i].map(inv_map)\\n\",\"    return df\\n\",\"\\n\",\"\\n\",\"#Imputation\\n\",\"new_data=imputation(MS_data1,MS_data1.columns[:]) #MS_data1[MS_data1.columns[:]]\"],\"metadata\":{\"id\":\"hinyKTaIjk23\"},\"execution_count\":60,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"print(new_data.isnull().sum())\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"FiZnXLieFEx_\",\"outputId\":\"f5da8023-a915-4dc0-d5a8-9666b3b1f927\"},\"execution_count\":61,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"MSbestcharacterizes            0\\n\",\"DiagnosticEvoked               0\\n\",\"Difficultywalking1             0\\n\",\"Difficulybalance               0\\n\",\"Shaking1                       0\\n\",\"                              ..\\n\",\"IVIS_HouseNumbers              0\\n\",\"IVIS_LettersNotes              0\\n\",\"IVIS_PrintedMaterial           0\\n\",\"WasOnAvonex                    0\\n\",\"Drug name [DrugNameCurrent]    0\\n\",\"Length: 105, dtype: int64\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"new_data.to_csv('drive/My Drive/Colab Notebooks/final.csv', index=False)\"],\"metadata\":{\"id\":\"kqPNfrxu4d_2\"},\"execution_count\":62,\"outputs\":[]}]}",
  "lang" : "jupyter",
  "owner" : "111111",
  "confidential" : "FALSE"
},{
  "id" : "k0z22w",
  "name" : "predictionModels",
  "description" : "jupyter",
  "code" : "{\"nbformat\":4,\"nbformat_minor\":0,\"metadata\":{\"colab\":{\"provenance\":[]},\"kernelspec\":{\"name\":\"python3\",\"display_name\":\"Python 3\"},\"language_info\":{\"name\":\"python\"}},\"cells\":[{\"cell_type\":\"code\",\"execution_count\":88,\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"318JEK-aGn2d\",\"outputId\":\"19f4e652-3d61-4a62-9abd-c463f693868b\"},\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\\\"/content/drive\\\", force_remount=True).\\n\"]}],\"source\":[\"from google.colab import drive\\n\",\"drive.mount('/content/drive')\\n\",\"import pandas as pd \\n\",\"import warnings\\n\",\"\\n\",\"warnings.filterwarnings('ignore')\\n\",\"MS_data1=pd.read_csv('drive/My Drive/Colab Notebooks/final.csv')\"]},{\"cell_type\":\"code\",\"source\":[\"'''from sklearn.preprocessing import LabelEncoder\\n\",\"from sklearn.preprocessing import OrdinalEncoder\\n\",\"\\n\",\"MS_data1=MS_data1.astype(str)\\n\",\"\\n\",\"categs_feats = MS_data1[MS_data1.columns[:-1]]\\n\",\"encoder = OrdinalEncoder()\\n\",\"categs_encoded = encoder.fit_transform(categs_feats)\\n\",\"MS_data1[MS_data1.columns[:-1]] = pd.DataFrame(categs_encoded, columns=categs_feats.columns, index=categs_feats.index).astype(int)\\n\",\"\\n\",\"MSDMT_feat = MS_data1[['Drug name [DrugNameCurrent]']]\\n\",\"label_encoder = LabelEncoder()\\n\",\"MSDMT_encoded = label_encoder.fit_transform(MSDMT_feat)\\n\",\"MS_data1[['Drug name [DrugNameCurrent]']]= pd.DataFrame(MSDMT_encoded, columns=MSDMT_feat.columns, index=MSDMT_feat.index)\\n\",\"print(MS_data1.isnull().sum())\\n\",\"print(MS_data1.shape)\\n\",\"MS_data1'''\\n\",\"\\n\",\"from sklearn.preprocessing import LabelEncoder\\n\",\"from sklearn.preprocessing import OrdinalEncoder\\n\",\"\\n\",\"MS_data1=MS_data1.astype(str)\\n\",\"\\n\",\"categs_feats = MS_data1[MS_data1.columns.difference(['MSbestcharacterizes'])] #Drug name [DrugNameCurrent]\\n\",\"encoder = OrdinalEncoder()\\n\",\"categs_encoded = encoder.fit_transform(categs_feats)\\n\",\"MS_data1[MS_data1.columns.difference(['MSbestcharacterizes'])] = pd.DataFrame(categs_encoded, columns=categs_feats.columns, index=categs_feats.index).astype(int)\\n\",\"\\n\",\"label_feat = MS_data1[['MSbestcharacterizes']] #Drug name [DrugNameCurrent]\\n\",\"label_encoder = LabelEncoder()\\n\",\"label_encoded = label_encoder.fit_transform(label_feat)\\n\",\"MS_data1[['MSbestcharacterizes']]= pd.DataFrame(label_encoded, columns=label_feat.columns, index=label_feat.index) #Drug name [DrugNameCurrent]\\n\",\"print(MS_data1.isnull().sum())\\n\",\"print(MS_data1.shape)\\n\",\"MS_data1.rename(columns={'Drug name [DrugNameCurrent]': 'DrugNameCurrent'}, inplace=True)\\n\",\"MS_data1\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":713},\"id\":\"7TG-0o5tG8gt\",\"outputId\":\"134c4b63-18c4-4735-b988-6c6c4a37c4ee\"},\"execution_count\":89,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"MSbestcharacterizes            0\\n\",\"DiagnosticEvoked               0\\n\",\"Difficultywalking1             0\\n\",\"Difficulybalance               0\\n\",\"Shaking1                       0\\n\",\"                              ..\\n\",\"IVIS_HouseNumbers              0\\n\",\"IVIS_LettersNotes              0\\n\",\"IVIS_PrintedMaterial           0\\n\",\"WasOnAvonex                    0\\n\",\"Drug name [DrugNameCurrent]    0\\n\",\"Length: 105, dtype: int64\\n\",\"(3442, 105)\\n\"]},{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"      MSbestcharacterizes  DiagnosticEvoked  Difficultywalking1  \\\\\\n\",\"0                       5                 1                   7   \\n\",\"1                       5                 1                   7   \\n\",\"2                       4                 0                   3   \\n\",\"3                       4                 0                   3   \\n\",\"4                       5                 1                   8   \\n\",\"...                   ...               ...                 ...   \\n\",\"3437                    0                 0                   0   \\n\",\"3438                    4                 0                  10   \\n\",\"3439                    2                 0                  10   \\n\",\"3440                    2                 1                   8   \\n\",\"3441                    4                 1                   3   \\n\",\"\\n\",\"      Difficulybalance  Shaking1  Stiffness1  Weaknessarms  Weaknesslegs1  \\\\\\n\",\"0                    7         0           6             9              7   \\n\",\"1                    7         0           6             9              7   \\n\",\"2                    3         0           3            11              0   \\n\",\"3                    3         0           3            11              0   \\n\",\"4                    0        12           0             0              3   \\n\",\"...                ...       ...         ...           ...            ...   \\n\",\"3437                 5        12          11             2              9   \\n\",\"3438                 4        12           6            11              9   \\n\",\"3439                 7        12           9             9              8   \\n\",\"3440                 7        10           9             9              8   \\n\",\"3441                 3        12           3            11              0   \\n\",\"\\n\",\"      Blindness1  Disturbedvision  ...  BLCS_LostControl  \\\\\\n\",\"0              8                9  ...                 2   \\n\",\"1              8                9  ...                 2   \\n\",\"2              1               12  ...                 2   \\n\",\"3              1               12  ...                 2   \\n\",\"4              2                1  ...                 2   \\n\",\"...          ...              ...  ...               ...   \\n\",\"3437          11               12  ...                 2   \\n\",\"3438           7                8  ...                 2   \\n\",\"3439          11               12  ...                 0   \\n\",\"3440          11               12  ...                 2   \\n\",\"3441           0               12  ...                 1   \\n\",\"\\n\",\"      BWCS_AlteredActivities  BWCS_Constipated  BWCS_Lifestyle  IVIS_Dials  \\\\\\n\",\"0                          0                 2               0           0   \\n\",\"1                          0                 2               0           0   \\n\",\"2                          0                 0               3           0   \\n\",\"3                          0                 0               3           0   \\n\",\"4                          0                 4               0           0   \\n\",\"...                      ...               ...             ...         ...   \\n\",\"3437                       0                 0               0           0   \\n\",\"3438                       0                 0               0           0   \\n\",\"3439                       0                 0               0           0   \\n\",\"3440                       2                 0               6           1   \\n\",\"3441                       0                 4               3           0   \\n\",\"\\n\",\"      IVIS_HouseNumbers  IVIS_LettersNotes  IVIS_PrintedMaterial  WasOnAvonex  \\\\\\n\",\"0                     0                  2                     2            1   \\n\",\"1                     0                  2                     2            1   \\n\",\"2                     0                  2                     2            0   \\n\",\"3                     0                  2                     2            0   \\n\",\"4                     0                  0                     0            1   \\n\",\"...                 ...                ...                   ...          ...   \\n\",\"3437                  0                  0                     0            0   \\n\",\"3438                  0                  0                     0            1   \\n\",\"3439                  0                  0                     0            1   \\n\",\"3440                  2                  1                     1            0   \\n\",\"3441                  0                  0                     0            0   \\n\",\"\\n\",\"      DrugNameCurrent  \\n\",\"0                  26  \\n\",\"1                  25  \\n\",\"2                  15  \\n\",\"3                  23  \\n\",\"4                   6  \\n\",\"...               ...  \\n\",\"3437                2  \\n\",\"3438               29  \\n\",\"3439                2  \\n\",\"3440               20  \\n\",\"3441               20  \\n\",\"\\n\",\"[3442 rows x 105 columns]\"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-fba480ad-8ba8-46b2-8a7b-c59868a69438\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>MSbestcharacterizes</th>\\n\",\"      <th>DiagnosticEvoked</th>\\n\",\"      <th>Difficultywalking1</th>\\n\",\"      <th>Difficulybalance</th>\\n\",\"      <th>Shaking1</th>\\n\",\"      <th>Stiffness1</th>\\n\",\"      <th>Weaknessarms</th>\\n\",\"      <th>Weaknesslegs1</th>\\n\",\"      <th>Blindness1</th>\\n\",\"      <th>Disturbedvision</th>\\n\",\"      <th>...</th>\\n\",\"      <th>BLCS_LostControl</th>\\n\",\"      <th>BWCS_AlteredActivities</th>\\n\",\"      <th>BWCS_Constipated</th>\\n\",\"      <th>BWCS_Lifestyle</th>\\n\",\"      <th>IVIS_Dials</th>\\n\",\"      <th>IVIS_HouseNumbers</th>\\n\",\"      <th>IVIS_LettersNotes</th>\\n\",\"      <th>IVIS_PrintedMaterial</th>\\n\",\"      <th>WasOnAvonex</th>\\n\",\"      <th>DrugNameCurrent</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>0</th>\\n\",\"      <td>5</td>\\n\",\"      <td>1</td>\\n\",\"      <td>7</td>\\n\",\"      <td>7</td>\\n\",\"      <td>0</td>\\n\",\"      <td>6</td>\\n\",\"      <td>9</td>\\n\",\"      <td>7</td>\\n\",\"      <td>8</td>\\n\",\"      <td>9</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>1</td>\\n\",\"      <td>26</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>1</th>\\n\",\"      <td>5</td>\\n\",\"      <td>1</td>\\n\",\"      <td>7</td>\\n\",\"      <td>7</td>\\n\",\"      <td>0</td>\\n\",\"      <td>6</td>\\n\",\"      <td>9</td>\\n\",\"      <td>7</td>\\n\",\"      <td>8</td>\\n\",\"      <td>9</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>1</td>\\n\",\"      <td>25</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>2</th>\\n\",\"      <td>4</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>11</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>15</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3</th>\\n\",\"      <td>4</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>11</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>23</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>4</th>\\n\",\"      <td>5</td>\\n\",\"      <td>1</td>\\n\",\"      <td>8</td>\\n\",\"      <td>0</td>\\n\",\"      <td>12</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>3</td>\\n\",\"      <td>2</td>\\n\",\"      <td>1</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>6</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>...</th>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"      <td>...</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3437</th>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>5</td>\\n\",\"      <td>12</td>\\n\",\"      <td>11</td>\\n\",\"      <td>2</td>\\n\",\"      <td>9</td>\\n\",\"      <td>11</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>2</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3438</th>\\n\",\"      <td>4</td>\\n\",\"      <td>0</td>\\n\",\"      <td>10</td>\\n\",\"      <td>4</td>\\n\",\"      <td>12</td>\\n\",\"      <td>6</td>\\n\",\"      <td>11</td>\\n\",\"      <td>9</td>\\n\",\"      <td>7</td>\\n\",\"      <td>8</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>29</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3439</th>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>10</td>\\n\",\"      <td>7</td>\\n\",\"      <td>12</td>\\n\",\"      <td>9</td>\\n\",\"      <td>9</td>\\n\",\"      <td>8</td>\\n\",\"      <td>11</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>1</td>\\n\",\"      <td>2</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3440</th>\\n\",\"      <td>2</td>\\n\",\"      <td>1</td>\\n\",\"      <td>8</td>\\n\",\"      <td>7</td>\\n\",\"      <td>10</td>\\n\",\"      <td>9</td>\\n\",\"      <td>9</td>\\n\",\"      <td>8</td>\\n\",\"      <td>11</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>2</td>\\n\",\"      <td>2</td>\\n\",\"      <td>0</td>\\n\",\"      <td>6</td>\\n\",\"      <td>1</td>\\n\",\"      <td>2</td>\\n\",\"      <td>1</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>20</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>3441</th>\\n\",\"      <td>4</td>\\n\",\"      <td>1</td>\\n\",\"      <td>3</td>\\n\",\"      <td>3</td>\\n\",\"      <td>12</td>\\n\",\"      <td>3</td>\\n\",\"      <td>11</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>12</td>\\n\",\"      <td>...</td>\\n\",\"      <td>1</td>\\n\",\"      <td>0</td>\\n\",\"      <td>4</td>\\n\",\"      <td>3</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>0</td>\\n\",\"      <td>20</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"<p>3442 rows × 105 columns</p>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-fba480ad-8ba8-46b2-8a7b-c59868a69438')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-fba480ad-8ba8-46b2-8a7b-c59868a69438 button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-fba480ad-8ba8-46b2-8a7b-c59868a69438');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":89}]},{\"cell_type\":\"code\",\"source\":[\"import numpy as np\\n\",\"from sklearn.model_selection import train_test_split\\n\",\"\\n\",\"X1 = MS_data1.drop('MSbestcharacterizes', axis=1) #Drug name [DrugNameCurrent]\\n\",\"y1 = MS_data1['MSbestcharacterizes'] #Drug name [DrugNameCurrent]\\n\",\"X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, random_state=123, test_size=0.10)\\n\",\"\\n\",\"X2 = MS_data1.drop('MSbestcharacterizes', axis=1) #Drug name [DrugNameCurrent]\\n\",\"y2 = MS_data1['MSbestcharacterizes'] #Drug name [DrugNameCurrent]\\n\",\"X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, random_state=123, test_size=0.20)\"],\"metadata\":{\"id\":\"fx3FJygwHMYg\"},\"execution_count\":90,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"print('Training data inputs', X1_train.shape)\\n\",\"print('Training labels', y1_train.shape)\\n\",\"print('Testing data inputs', X1_test.shape)\\n\",\"print('Testing labels', y1_test.shape)\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"lVCe-lpLPTte\",\"outputId\":\"872cd0eb-cef6-4055-cac5-88c3d816afa9\"},\"execution_count\":91,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"Training data inputs (3097, 104)\\n\",\"Training labels (3097,)\\n\",\"Testing data inputs (345, 104)\\n\",\"Testing labels (345,)\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"print('Training data inputs', X2_train.shape)\\n\",\"print('Training labels', y2_train.shape)\\n\",\"print('Testing data inputs', X2_test.shape)\\n\",\"print('Testing labels', y2_test.shape)\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"DeZH49Yy2Nee\",\"outputId\":\"f41d4b37-7e1f-41cf-8a90-a8a0ce7d3dc2\"},\"execution_count\":92,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"Training data inputs (2409, 104)\\n\",\"Training labels (2409,)\\n\",\"Testing data inputs (1033, 104)\\n\",\"Testing labels (1033,)\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"from itertools import count\\n\",\"from statistics import mean\\n\",\"from sklearn.metrics import confusion_matrix\\n\",\"\\n\",\"def class_report(y_test, y_pred):\\n\",\"  cm=confusion_matrix(y_test, y_pred)\\n\",\"  FP = cm.sum(axis=0) - np.diag(cm) \\n\",\"  FN = cm.sum(axis=1) - np.diag(cm)\\n\",\"  TP = np.diag(cm)\\n\",\"  TN = cm.sum() - (FP + FN + TP)\\n\",\"  FP = FP.astype(float)\\n\",\"  FN = FN.astype(float)\\n\",\"  TP = TP.astype(float)\\n\",\"  TN = TN.astype(float)\\n\",\"  # Sensitivity, hit rate, recall, or true positive rate\\n\",\"  TPR = TP/(TP+FN)\\n\",\"  # Specificity or true negative rate\\n\",\"  TNR = TN/(TN+FP) \\n\",\"  # Precision or positive predictive value\\n\",\"  PPV = TP/(TP+FP)\\n\",\"  # Negative predictive value\\n\",\"  NPV = TN/(TN+FN)\\n\",\"  # Fall out or false positive rate\\n\",\"  FPR = FP/(FP+TN)\\n\",\"  # False negative rate\\n\",\"  FNR = FN/(TP+FN)\\n\",\"  # False discovery rate\\n\",\"  FDR = FP/(TP+FP)\\n\",\"  # Overall accuracy for each class\\n\",\"  ACC = (TP+TN)/(TP+FP+FN+TN)\\n\",\"  # Return Overall Sensitivity Specificity\\n\",\"  return mean(TPR), mean(TNR)\"],\"metadata\":{\"id\":\"91D6VuV_jwl6\"},\"execution_count\":93,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.metrics import accuracy_score\\n\",\"from sklearn import neighbors\\n\",\"from sklearn.svm import SVC\\n\",\"from sklearn.linear_model import LogisticRegression\\n\",\"from sklearn.tree import DecisionTreeClassifier\\n\",\"from sklearn.ensemble import RandomForestClassifier\\n\",\"from sklearn.naive_bayes import GaussianNB\\n\",\"from sklearn.linear_model import Perceptron\\n\",\"from sklearn.linear_model import SGDClassifier\\n\",\"from sklearn.ensemble import VotingClassifier\\n\",\"from sklearn.ensemble import GradientBoostingClassifier\\n\",\"from sklearn.ensemble import BaggingClassifier\\n\",\"from sklearn.ensemble import AdaBoostClassifier\\n\",\"from sklearn.ensemble import StackingClassifier\\n\",\"import xgboost as xgb\\n\",\"\\n\",\"# KNN\\n\",\"np.random.seed(0)\\n\",\"knn_model = neighbors.KNeighborsClassifier()\\n\",\"knn_model.fit(X1_train, y1_train)\\n\",\"knn_pred = knn_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, knn_pred)\\n\",\"print('The test accuracy of k-Nearest Neighbors is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, knn_pred)\\n\",\"print('The test sensitivity and specificity of k-Nearest Neighbors are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SVC\\n\",\"np.random.seed(0)\\n\",\"svc_model=SVC() #kernel='linear'\\n\",\"svc_model.fit(X1_train, y1_train)\\n\",\"svc_pred = svc_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, svc_pred)\\n\",\"print('The test accuracy of Support Vector Classifier is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, svc_pred)\\n\",\"print('The test sensitivity and specificity of Support Vector Classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Logistic Regression\\n\",\"np.random.seed(0)\\n\",\"lr_model = LogisticRegression()\\n\",\"lr_model.fit(X1_train, y1_train)\\n\",\"lr_pred = lr_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, lr_pred)\\n\",\"print('The test accuracy of Logistic Regression is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, lr_pred)\\n\",\"print('The test sensitivity and specificity of Logistic Regression are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Decision Trees\\n\",\"np.random.seed(0)\\n\",\"dt_model = DecisionTreeClassifier()\\n\",\"dt_model.fit(X1_train, y1_train)\\n\",\"dt_pred = dt_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, dt_pred)\\n\",\"print('The test accuracy of Decision Tree is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, dt_pred)\\n\",\"print('The test sensitivity and specificity of Decision Tree are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Random Forest\\n\",\"np.random.seed(0)\\n\",\"rf_model = RandomForestClassifier() #n_estimators=50\\n\",\"rf_model.fit(X1_train, y1_train)\\n\",\"rf_pred = rf_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, rf_pred)\\n\",\"print('The test accuracy of Random Forest is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, rf_pred)\\n\",\"print('The test sensitivity and specificity of Random Forest are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Naive Bayes\\n\",\"np.random.seed(0)\\n\",\"nb_model = GaussianNB()\\n\",\"nb_model.fit(X1_train, y1_train)\\n\",\"nb_pred = nb_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, nb_pred)\\n\",\"print('The test accuracy of Naive Bayes is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, nb_pred)\\n\",\"print('The test sensitivity and specificity of Naive Bayes are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Perceptron\\n\",\"np.random.seed(0)\\n\",\"ppn_model = Perceptron() #max_iter=50, eta0=0.7\\n\",\"ppn_model.fit(X1_train, y1_train)\\n\",\"ppn_pred = ppn_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, ppn_pred)\\n\",\"print('The test accuracy of Perceptron is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, ppn_pred)\\n\",\"print('The test sensitivity and specificity of Perceptron are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SGD\\n\",\"np.random.seed(0)\\n\",\"sgd_model = SGDClassifier() #max_iter=50, loss='hinge', random_state=1\\n\",\"sgd_model.fit(X1_train, y1_train)\\n\",\"sgd_pred = sgd_model.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, sgd_pred)\\n\",\"print('The test accuracy of SGD is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, sgd_pred)\\n\",\"print('The test sensitivity and specificity of SGD are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Voting \\n\",\"np.random.seed(0)\\n\",\"voting_classifier = VotingClassifier(\\n\",\"    estimators=[('svc', SVC()),\\n\",\"                ('dt',DecisionTreeClassifier()),\\n\",\"                ('rf', RandomForestClassifier())], \\n\",\"    voting='hard') #('knn', knn_model), ('lr',lr_model),\\n\",\"voting_classifier.fit(X1_train, y1_train)\\n\",\"vc_pred = voting_classifier.predict(X1_test)\\n\",\"accuracy = accuracy_score(y1_test, vc_pred)\\n\",\"print('The test accuracy of voting_classifier is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y1_test, vc_pred)\\n\",\"print('The test sensitivity and specificity of hard voting_classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Bagging\\n\",\"np.random.seed(0)\\n\",\"bagging_classifier1 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=True\\n\",\")\\n\",\"bagging_classifier2 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=False\\n\",\")\\n\",\"bagging_classifier1.fit(X1_train, y1_train)\\n\",\"bagging_classifier2.fit(X1_train, y1_train)\\n\",\"bagging_preds1 = bagging_classifier1.predict(X1_test)\\n\",\"bagging_preds2 = bagging_classifier2.predict(X1_test)\\n\",\"bagging_acc1 = accuracy_score(y1_test, bagging_preds1)\\n\",\"bagging_acc2 = accuracy_score(y1_test, bagging_preds2)\\n\",\"print('Bootstrapping accuracy is {0:7.2f} %'.format(bagging_acc1*100))\\n\",\"print('Pasting accuracy is {0:7.2f} %'.format(bagging_acc2*100))\\n\",\"report1=class_report(y1_test, bagging_preds1)\\n\",\"report2=class_report(y1_test, bagging_preds2)\\n\",\"print('Bootstrapping sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report1[1]*100))\\n\",\"print('Pasting sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report2[1]*100),'\\\\n')\\n\",\"\\n\",\"# Gradient Boosting\\n\",\"np.random.seed(0)\\n\",\"grad_boost_classifier = GradientBoostingClassifier() #n_estimators=500,learning_rate=0.8,random_state=42,max_depth=2 \\n\",\"grad_boost_classifier.fit(X1_train, y1_train)\\n\",\"gboost_preds = grad_boost_classifier.predict(X1_test)\\n\",\"gboost_acc = accuracy_score(y1_test, gboost_preds)\\n\",\"print('Gradient Boosting Ensemble accuracy is {0:7.2f} %'.format(gboost_acc*100))\\n\",\"report=class_report(y1_test, gboost_preds)\\n\",\"print('The test sensitivity and specificity of Gradient Boosting Ensemble are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# AdaBoost \\n\",\"adaboost_classifier = AdaBoostClassifier(\\n\",\"    base_estimator=RandomForestClassifier()\\n\",\"    )\\n\",\"adaboost_classifier.fit(X1_train, y1_train)\\n\",\"adaboost_preds = adaboost_classifier.predict(X1_test)\\n\",\"adaboost_acc = accuracy_score(y1_test, adaboost_preds)\\n\",\"print('AdaBoost Ensemble accuracy is {0:7.2f} %'.format(adaboost_acc*100))\\n\",\"report=class_report(y1_test, adaboost_preds)\\n\",\"print('AdaBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Stacking \\n\",\"np.random.seed(0)\\n\",\"base_estimators = [\\n\",\"    ('dt', DecisionTreeClassifier()),('rf',RandomForestClassifier())]\\n\",\"final_estimator = SVC()\\n\",\"stack_classifier = StackingClassifier(estimators = base_estimators, \\n\",\"                               final_estimator = final_estimator)\\n\",\"stack_classifier.fit(X1_train, y1_train)\\n\",\"stack_preds = stack_classifier.predict(X1_test)\\n\",\"stack_acc = accuracy_score(y1_test, stack_preds)\\n\",\"print('Stacking Ensemble accuracy is {0:7.2f} %'.format(stack_acc*100))\\n\",\"report=class_report(y1_test, stack_preds)\\n\",\"print('Stacking sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# XGBoost\\n\",\"np.random.seed(0)\\n\",\"xgb_classifier = xgb.XGBClassifier()\\n\",\"xgb_classifier.fit(X1_train, y1_train)\\n\",\"xgboost_preds = xgb_classifier.predict(X1_test)\\n\",\"xgboost_acc = accuracy_score(y1_test, xgboost_preds)\\n\",\"print('XGBoost Ensemble accuracy is {0:7.4f} %'.format(xgboost_acc*100))\\n\",\"report=class_report(y1_test, xgboost_preds)\\n\",\"print('XGBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"X8Z3gMV7INBs\",\"outputId\":\"5571614e-55d1-401c-affd-5288ef1dd2cb\"},\"execution_count\":94,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"The test accuracy of k-Nearest Neighbors is 64.35 %\\n\",\"The test sensitivity and specificity of k-Nearest Neighbors are 29.66, 87.14 % \\n\",\"\\n\",\"The test accuracy of Support Vector Classifier is 71.88 %\\n\",\"The test sensitivity and specificity of Support Vector Classifier are 31.05, 88.94 % \\n\",\"\\n\",\"The test accuracy of Logistic Regression is 70.43 %\\n\",\"The test sensitivity and specificity of Logistic Regression are 33.18, 89.58 % \\n\",\"\\n\",\"The test accuracy of Decision Tree is 64.35 %\\n\",\"The test sensitivity and specificity of Decision Tree are 33.55, 89.08 % \\n\",\"\\n\",\"The test accuracy of Random Forest is 74.78 %\\n\",\"The test sensitivity and specificity of Random Forest are 34.33, 89.75 % \\n\",\"\\n\",\"The test accuracy of Naive Bayes is 40.29 %\\n\",\"The test sensitivity and specificity of Naive Bayes are 30.50, 87.46 % \\n\",\"\\n\",\"The test accuracy of Perceptron is 50.72 %\\n\",\"The test sensitivity and specificity of Perceptron are 34.68, 88.54 % \\n\",\"\\n\",\"The test accuracy of SGD is 68.70 %\\n\",\"The test sensitivity and specificity of SGD are 29.22, 88.30 % \\n\",\"\\n\",\"The test accuracy of voting_classifier is 76.23 %\\n\",\"The test sensitivity and specificity of hard voting_classifier are 35.75, 90.40 % \\n\",\"\\n\",\"Bootstrapping accuracy is   74.78 %\\n\",\"Pasting accuracy is   74.20 %\\n\",\"Bootstrapping sensitivity and specificity are 35.75, 89.75 %\\n\",\"Pasting sensitivity and specificity are 35.75, 89.55 % \\n\",\"\\n\",\"Gradient Boosting Ensemble accuracy is   75.36 %\\n\",\"The test sensitivity and specificity of Gradient Boosting Ensemble are 36.63, 91.32 % \\n\",\"\\n\",\"AdaBoost Ensemble accuracy is   73.91 %\\n\",\"AdaBoost sensitivity and specificity are 32.44, 89.58 % \\n\",\"\\n\",\"Stacking Ensemble accuracy is   75.07 %\\n\",\"Stacking sensitivity and specificity are 34.42, 89.97 % \\n\",\"\\n\",\"XGBoost Ensemble accuracy is 73.6232 %\\n\",\"XGBoost sensitivity and specificity are 34.70, 90.43 % \\n\",\"\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.metrics import accuracy_score\\n\",\"from sklearn import neighbors\\n\",\"from sklearn.svm import SVC\\n\",\"from sklearn.linear_model import LogisticRegression\\n\",\"from sklearn.tree import DecisionTreeClassifier\\n\",\"from sklearn.ensemble import RandomForestClassifier\\n\",\"from sklearn.naive_bayes import GaussianNB\\n\",\"from sklearn.linear_model import Perceptron\\n\",\"from sklearn.linear_model import SGDClassifier\\n\",\"\\n\",\"# KNN\\n\",\"np.random.seed(0)\\n\",\"knn_model = neighbors.KNeighborsClassifier()\\n\",\"knn_model.fit(X2_train, y2_train)\\n\",\"knn_pred = knn_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, knn_pred)\\n\",\"print('The test accuracy of k-Nearest Neighbors is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, knn_pred)\\n\",\"print('The test sensitivity and specificity of k-Nearest Neighbors are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SVC\\n\",\"np.random.seed(0)\\n\",\"svc_model=SVC()\\n\",\"svc_model.fit(X2_train, y2_train)\\n\",\"svc_pred = svc_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, svc_pred)\\n\",\"print('The test accuracy of Support Vector Classifier is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, svc_pred)\\n\",\"print('The test sensitivity and specificity of Support Vector Classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Logistic Regression\\n\",\"np.random.seed(0)\\n\",\"lr_model = LogisticRegression()\\n\",\"lr_model.fit(X2_train, y2_train)\\n\",\"lr_pred = lr_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, lr_pred)\\n\",\"print('The test accuracy of Logistic Regression is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, lr_pred)\\n\",\"print('The test sensitivity and specificity of Logistic Regression are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Decision Trees\\n\",\"np.random.seed(0)\\n\",\"dt_model = DecisionTreeClassifier()\\n\",\"dt_model.fit(X2_train, y2_train)\\n\",\"dt_pred = dt_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, dt_pred)\\n\",\"print('The test accuracy of Decision Tree is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, dt_pred)\\n\",\"print('The test sensitivity and specificity of Decision Tree are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Random Forest\\n\",\"np.random.seed(0)\\n\",\"rf_model = RandomForestClassifier()\\n\",\"rf_model.fit(X2_train, y2_train)\\n\",\"rf_pred = rf_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, rf_pred)\\n\",\"#accuracy2 = rf_model.score(X2_test, y2_test)\\n\",\"print('The test accuracy of Random Forest is {0:5.2f} %'.format(accuracy*100))\\n\",\"#print('The test accuracy 2 of Random Forest is {0:5.2f} %'.format(accuracy2*100))\\n\",\"report=class_report(y2_test, rf_pred)\\n\",\"print('The test sensitivity and specificity of Random Forest are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Naive Bayes\\n\",\"np.random.seed(0)\\n\",\"nb_model = GaussianNB()\\n\",\"nb_model.fit(X2_train, y2_train)\\n\",\"nb_pred = nb_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, nb_pred)\\n\",\"print('The test accuracy of Naive Bayes is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, nb_pred)\\n\",\"print('The test sensitivity and specificity of Naive Bayes are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Perceptron\\n\",\"np.random.seed(0)\\n\",\"ppn_model = Perceptron()\\n\",\"ppn_model.fit(X2_train, y2_train)\\n\",\"ppn_pred = ppn_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, ppn_pred)\\n\",\"print('The test accuracy of Perceptron is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, ppn_pred)\\n\",\"print('The test sensitivity and specificity of Perceptron are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SGD\\n\",\"np.random.seed(0)\\n\",\"sgd_model = SGDClassifier()\\n\",\"sgd_model.fit(X2_train, y2_train)\\n\",\"sgd_pred = sgd_model.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, sgd_pred)\\n\",\"print('The test accuracy of SGD is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, sgd_pred)\\n\",\"print('The test sensitivity and specificity of SGD are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Voting \\n\",\"np.random.seed(0)\\n\",\"voting_classifier = VotingClassifier(\\n\",\"    estimators=[('svc', svc_model),\\n\",\"                ('dt',dt_model),\\n\",\"                ('rf', rf_model)], \\n\",\"    voting='hard') #('knn', knn_model), ('lr',lr_model),\\n\",\"voting_classifier.fit(X2_train, y2_train)\\n\",\"vc_pred = voting_classifier.predict(X2_test)\\n\",\"accuracy = accuracy_score(y2_test, vc_pred)\\n\",\"print('The test accuracy of voting_classifier is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2_test, vc_pred)\\n\",\"print('The test sensitivity and specificity of hard voting_classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Bagging\\n\",\"np.random.seed(0)\\n\",\"bagging_classifier1 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=True\\n\",\")\\n\",\"bagging_classifier2 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=False\\n\",\")\\n\",\"bagging_classifier1.fit(X2_train, y2_train)\\n\",\"bagging_classifier2.fit(X2_train, y2_train)\\n\",\"bagging_preds1 = bagging_classifier1.predict(X2_test)\\n\",\"bagging_preds2 = bagging_classifier2.predict(X2_test)\\n\",\"bagging_acc1 = accuracy_score(y2_test, bagging_preds1)\\n\",\"bagging_acc2 = accuracy_score(y2_test, bagging_preds2)\\n\",\"print('Bootstrapping accuracy is {0:7.2f} %'.format(bagging_acc1*100))\\n\",\"print('Pasting accuracy is {0:7.2f} %'.format(bagging_acc2*100))\\n\",\"report1=class_report(y2_test, bagging_preds1)\\n\",\"report2=class_report(y2_test, bagging_preds2)\\n\",\"print('Bootstrapping sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report1[1]*100))\\n\",\"print('Pasting sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report2[1]*100),'\\\\n')\\n\",\"\\n\",\"# Gradient Boosting\\n\",\"np.random.seed(0)\\n\",\"grad_boost_classifier = GradientBoostingClassifier() #n_estimators=500,learning_rate=0.8,random_state=42,max_depth=2 \\n\",\"grad_boost_classifier.fit(X2_train, y2_train)\\n\",\"gboost_preds = grad_boost_classifier.predict(X2_test)\\n\",\"gboost_acc = accuracy_score(y2_test, gboost_preds)\\n\",\"print('Gradient Boosting Ensemble accuracy is {0:7.2f} %'.format(gboost_acc*100))\\n\",\"report=class_report(y2_test, gboost_preds)\\n\",\"print('The test sensitivity and specificity of Gradient Boosting Ensemble are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# AdaBoost \\n\",\"adaboost_classifier = AdaBoostClassifier(\\n\",\"    base_estimator=RandomForestClassifier()\\n\",\"    )\\n\",\"adaboost_classifier.fit(X2_train, y2_train)\\n\",\"adaboost_preds = adaboost_classifier.predict(X2_test)\\n\",\"adaboost_acc = accuracy_score(y2_test, adaboost_preds)\\n\",\"print('AdaBoost Ensemble accuracy is {0:7.2f} %'.format(adaboost_acc*100))\\n\",\"report=class_report(y2_test, adaboost_preds)\\n\",\"print('AdaBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Stacking \\n\",\"np.random.seed(0)\\n\",\"base_estimators = [\\n\",\"    ('dt', DecisionTreeClassifier()),('rf',RandomForestClassifier())]\\n\",\"final_estimator = SVC()\\n\",\"stack_classifier = StackingClassifier(estimators = base_estimators, \\n\",\"                               final_estimator = final_estimator)\\n\",\"stack_classifier.fit(X2_train, y2_train)\\n\",\"stack_preds = stack_classifier.predict(X2_test)\\n\",\"stack_acc = accuracy_score(y2_test, stack_preds)\\n\",\"print('Stacking Ensemble accuracy is {0:7.2f} %'.format(stack_acc*100))\\n\",\"report=class_report(y2_test, stack_preds)\\n\",\"print('Stacking sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# XGBoost\\n\",\"np.random.seed(0)\\n\",\"xgb_classifier = xgb.XGBClassifier()\\n\",\"xgb_classifier.fit(X2_train, y2_train)\\n\",\"xgboost_preds = xgb_classifier.predict(X2_test)\\n\",\"xgboost_acc = accuracy_score(y2_test, xgboost_preds)\\n\",\"print('XGBoost Ensemble accuracy is {0:7.4f} %'.format(xgboost_acc*100))\\n\",\"report=class_report(y2_test, xgboost_preds)\\n\",\"print('XGBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"mnlsy1HZIn5C\",\"outputId\":\"b29bddb6-6ef7-4678-b792-a178b5d17276\"},\"execution_count\":95,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"The test accuracy of k-Nearest Neighbors is 61.57 %\\n\",\"The test sensitivity and specificity of k-Nearest Neighbors are 27.24, 87.34 % \\n\",\"\\n\",\"The test accuracy of Support Vector Classifier is 70.38 %\\n\",\"The test sensitivity and specificity of Support Vector Classifier are 26.81, 88.61 % \\n\",\"\\n\",\"The test accuracy of Logistic Regression is 69.41 %\\n\",\"The test sensitivity and specificity of Logistic Regression are 31.03, 89.73 % \\n\",\"\\n\",\"The test accuracy of Decision Tree is 59.92 %\\n\",\"The test sensitivity and specificity of Decision Tree are 31.83, 88.54 % \\n\",\"\\n\",\"The test accuracy of Random Forest is 74.35 %\\n\",\"The test sensitivity and specificity of Random Forest are 33.84, 90.42 % \\n\",\"\\n\",\"The test accuracy of Naive Bayes is 42.69 %\\n\",\"The test sensitivity and specificity of Naive Bayes are 32.34, 87.96 % \\n\",\"\\n\",\"The test accuracy of Perceptron is 65.34 %\\n\",\"The test sensitivity and specificity of Perceptron are 22.36, 86.11 % \\n\",\"\\n\",\"The test accuracy of SGD is 69.41 %\\n\",\"The test sensitivity and specificity of SGD are 27.25, 88.32 % \\n\",\"\\n\",\"The test accuracy of voting_classifier is 74.06 %\\n\",\"The test sensitivity and specificity of hard voting_classifier are 33.72, 90.32 % \\n\",\"\\n\",\"Bootstrapping accuracy is   73.28 %\\n\",\"Pasting accuracy is   73.67 %\\n\",\"Bootstrapping sensitivity and specificity are 33.72, 89.86 %\\n\",\"Pasting sensitivity and specificity are 33.72, 90.15 % \\n\",\"\\n\",\"Gradient Boosting Ensemble accuracy is   71.35 %\\n\",\"The test sensitivity and specificity of Gradient Boosting Ensemble are 34.37, 90.31 % \\n\",\"\\n\",\"AdaBoost Ensemble accuracy is   73.86 %\\n\",\"AdaBoost sensitivity and specificity are 33.97, 90.23 % \\n\",\"\\n\",\"Stacking Ensemble accuracy is   73.28 %\\n\",\"Stacking sensitivity and specificity are 32.09, 90.03 % \\n\",\"\\n\",\"XGBoost Ensemble accuracy is 72.1200 %\\n\",\"XGBoost sensitivity and specificity are 33.79, 90.27 % \\n\",\"\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.model_selection import cross_validate\\n\",\"from sklearn.model_selection import cross_val_predict\\n\",\"\\n\",\"# KNN\\n\",\"np.random.seed(0)\\n\",\"knn_model = neighbors.KNeighborsClassifier()\\n\",\"cv_result = cross_validate(knn_model, X2, y2, cv=5)\\n\",\"knn_y_pred = cross_val_predict(knn_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for KNN is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, knn_y_pred)\\n\",\"print('The test accuracy of k-Nearest Neighbors is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, knn_y_pred)\\n\",\"print('The test sensitivity and specificity of k-Nearest Neighbors are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SVC\\n\",\"np.random.seed(0)\\n\",\"svc_model=SVC()\\n\",\"cv_result = cross_validate(svc_model, X2, y2, cv=5)\\n\",\"svc_y_pred = cross_val_predict(svc_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for SVC is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, svc_y_pred)\\n\",\"print('The test accuracy of k-SVC is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, svc_y_pred)\\n\",\"print('The test sensitivity and specificity of SVC are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Logistic Regression\\n\",\"np.random.seed(0)\\n\",\"lr_model = LogisticRegression()\\n\",\"cv_result = cross_validate(lr_model, X2, y2, cv=5)\\n\",\"lr_y_pred = cross_val_predict(lr_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for Logistic Regression is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, lr_y_pred)\\n\",\"print('The test accuracy of Logistic Regression is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, lr_y_pred)\\n\",\"print('The test sensitivity and specificity of Logistic Regression are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Decision Trees\\n\",\"np.random.seed(0)\\n\",\"dt_model = DecisionTreeClassifier()\\n\",\"cv_result = cross_validate(dt_model, X2, y2, cv=5)\\n\",\"dt_y_pred = cross_val_predict(dt_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for Decision Trees is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, dt_y_pred)\\n\",\"print('The test accuracy of Decision Trees is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, dt_y_pred)\\n\",\"print('The test sensitivity and specificity of Decision Trees are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Random Forest\\n\",\"np.random.seed(0)\\n\",\"rf_model = RandomForestClassifier()\\n\",\"cv_result = cross_validate(rf_model, X2, y2, cv=5)\\n\",\"rf_y_pred = cross_val_predict(rf_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for Random Forest is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, rf_y_pred)\\n\",\"print('The test accuracy of Random Forest is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, rf_y_pred)\\n\",\"print('The test sensitivity and specificity of Random Forest are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Naive Bayes\\n\",\"np.random.seed(0)\\n\",\"nb_model = GaussianNB()\\n\",\"cv_result = cross_validate(nb_model, X2, y2, cv=5)\\n\",\"nb_y_pred = cross_val_predict(nb_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for Naive Bayes is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, nb_y_pred)\\n\",\"print('The test accuracy of Naive Bayes is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, nb_y_pred)\\n\",\"print('The test sensitivity and specificity of Naive Bayes are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Perceptron\\n\",\"np.random.seed(0)\\n\",\"ppn_model = Perceptron()\\n\",\"cv_result = cross_validate(ppn_model, X2, y2, cv=5)\\n\",\"ppn_y_pred = cross_val_predict(ppn_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for Perceptron is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, ppn_y_pred)\\n\",\"print('The test accuracy of Perceptron is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, ppn_y_pred)\\n\",\"print('The test sensitivity and specificity of Perceptron are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# SGD\\n\",\"np.random.seed(0)\\n\",\"sgd_model = SGDClassifier()\\n\",\"cv_result = cross_validate(sgd_model, X2, y2, cv=5)\\n\",\"sgd_y_pred = cross_val_predict(sgd_model, X2, y2, cv=5)\\n\",\"scores = cv_result[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy for SGD is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"accuracy = accuracy_score(y2, sgd_y_pred)\\n\",\"print('The test accuracy of SGD is {0:5.2f} %'.format(accuracy*100))\\n\",\"report=class_report(y2, sgd_y_pred)\\n\",\"print('The test sensitivity and specificity of SGD are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Voting \\n\",\"np.random.seed(0)\\n\",\"voting_classifier = VotingClassifier(\\n\",\"    estimators=[('svc', svc_model),\\n\",\"                ('dt',dt_model),\\n\",\"                ('rf', rf_model)], \\n\",\"    voting='hard') #('knn', knn_model), ('lr',lr_model),\\n\",\"voting_classifier_cv = cross_validate(voting_classifier, X2, y2, cv=5)\\n\",\"voting_preds = cross_val_predict(voting_classifier, X2, y2, cv=5)\\n\",\"scores = voting_classifier_cv[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of voting_classifier is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"voting_acc = accuracy_score(y2, voting_preds)\\n\",\"print('Gradient Boosting Ensemble accuracy is {0:7.2f} %'.format(gboost_acc*100))\\n\",\"report=class_report(y2, voting_preds)\\n\",\"print('The test sensitivity and specificity of voting_classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Bagging\\n\",\"np.random.seed(0)\\n\",\"bagging_classifier1 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=True\\n\",\")\\n\",\"bagging_classifier2 = BaggingClassifier(\\n\",\"      RandomForestClassifier(), bootstrap=False\\n\",\")\\n\",\"bagging_classifier1.fit(X2_train, y2_train)\\n\",\"bagging_classifier2.fit(X2_train, y2_train)\\n\",\"bagging_preds1 = bagging_classifier1.predict(X2_test)\\n\",\"bagging_preds2 = bagging_classifier2.predict(X2_test)\\n\",\"bagging_classifier_cv1 = cross_validate(bagging_classifier1, X2, y2, cv=5)\\n\",\"bagging_classifier_cv2 = cross_validate(bagging_classifier2, X2, y2, cv=5)\\n\",\"bagging_preds1 = cross_val_predict(bagging_classifier1, X2, y2, cv=5)\\n\",\"bagging_preds2 = cross_val_predict(bagging_classifier2, X2, y2, cv=5)\\n\",\"scores1 = bagging_classifier_cv1[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of Bootstrapping is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"scores2 = bagging_classifier_cv2[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of Pasting is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"bagging_acc1 = accuracy_score(y2, bagging_preds1)\\n\",\"bagging_acc2 = accuracy_score(y2, bagging_preds2)\\n\",\"print('Bootstrapping accuracy is {0:7.2f} %'.format(bagging_acc1*100))\\n\",\"print('Pasting accuracy is {0:7.2f} %'.format(bagging_acc2*100))\\n\",\"report1=class_report(y2, bagging_preds1)\\n\",\"report2=class_report(y2, bagging_preds2)\\n\",\"print('Bootstrapping sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report1[1]*100))\\n\",\"print('Pasting sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report2[1]*100),'\\\\n')\\n\",\"\\n\",\"# Gradient Boosting\\n\",\"np.random.seed(0)\\n\",\"grad_boost_classifier = GradientBoostingClassifier() #n_estimators=500,learning_rate=0.8,random_state=42,max_depth=2 \\n\",\"grad_boost_cv = cross_validate(grad_boost_classifier, X2, y2, cv=5)\\n\",\"gboost_preds = cross_val_predict(grad_boost_classifier, X2, y2, cv=5)\\n\",\"scores = grad_boost_cv[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of Gradient Boosting classifier is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"gboost_acc = accuracy_score(y2, gboost_preds)\\n\",\"print('Gradient Boosting Ensemble accuracy is {0:7.2f} %'.format(gboost_acc*100))\\n\",\"report=class_report(y2, gboost_preds)\\n\",\"print('The test sensitivity and specificity of Gradient Boosting classifier are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# AdaBoost \\n\",\"adaboost_classifier = AdaBoostClassifier(\\n\",\"    base_estimator=RandomForestClassifier()\\n\",\"    )\\n\",\"ada_boost_cv = cross_validate(adaboost_classifier, X2, y2, cv=5)\\n\",\"ada_preds = cross_val_predict(adaboost_classifier, X2, y2, cv=5)\\n\",\"scores = ada_boost_cv[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of AdaBoost classifier is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"adaboost_acc = accuracy_score(y2, ada_preds)\\n\",\"print('AdaBoost Ensemble accuracy is {0:7.2f} %'.format(adaboost_acc*100))\\n\",\"report=class_report(y2, ada_preds)\\n\",\"print('AdaBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# Stacking \\n\",\"np.random.seed(0)\\n\",\"base_estimators = [\\n\",\"    ('dt', DecisionTreeClassifier()),('rf',RandomForestClassifier())]\\n\",\"final_estimator = SVC()\\n\",\"stack_classifier = StackingClassifier(estimators = base_estimators, \\n\",\"                               final_estimator = final_estimator)\\n\",\"stack_boost_cv = cross_validate(stack_classifier, X2, y2, cv=5)\\n\",\"stack_preds = cross_val_predict(stack_classifier, X2, y2, cv=5)\\n\",\"scores = stack_boost_cv[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of Stacking classifier is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"stack_acc = accuracy_score(y2, stack_preds)\\n\",\"print('Stacking Ensemble accuracy is {0:7.2f} %'.format(stack_acc*100))\\n\",\"report=class_report(y2, stack_preds)\\n\",\"print('Stacking sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\\n\",\"\\n\",\"# XGBoost\\n\",\"np.random.seed(0)\\n\",\"xgb_classifier = xgb.XGBClassifier()\\n\",\"xgboost_cv = cross_validate(xgb_classifier, X2, y2, cv=5)\\n\",\"xgboost_preds = cross_val_predict(xgb_classifier, X2, y2, cv=5)\\n\",\"scores = xgboost_cv[\\\"test_score\\\"]\\n\",\"print(\\\"The mean cross-validation accuracy of XGBoost classifier is: \\\"\\n\",\"      f\\\"{scores.mean():.3f} +/- {scores.std():.3f}\\\")\\n\",\"xgboost_acc = accuracy_score(y2, xgboost_preds)\\n\",\"print('XGBoost Ensemble accuracy is {0:7.4f} %'.format(xgboost_acc*100))\\n\",\"report=class_report(y2, xgboost_preds)\\n\",\"print('XGBoost sensitivity and specificity are {0:.2f}, {1:.2f} %'.format(report[0]*100,report[1]*100),'\\\\n')\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"j_XRCoFBRUJc\",\"outputId\":\"a6227598-812c-4165-8f0f-121a6e457a56\"},\"execution_count\":96,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"The mean cross-validation accuracy for KNN is: 0.598 +/- 0.010\\n\",\"The test accuracy of k-Nearest Neighbors is 59.85 %\\n\",\"The test sensitivity and specificity of k-Nearest Neighbors are 26.06, 86.48 % \\n\",\"\\n\",\"The mean cross-validation accuracy for SVC is: 0.685 +/- 0.006\\n\",\"The test accuracy of k-SVC is 68.54 %\\n\",\"The test sensitivity and specificity of SVC are 24.80, 87.70 % \\n\",\"\\n\",\"The mean cross-validation accuracy for Logistic Regression is: 0.670 +/- 0.017\\n\",\"The test accuracy of Logistic Regression is 66.97 %\\n\",\"The test sensitivity and specificity of Logistic Regression are 28.29, 88.70 % \\n\",\"\\n\",\"The mean cross-validation accuracy for Decision Trees is: 0.551 +/- 0.011\\n\",\"The test accuracy of Decision Trees is 55.11 %\\n\",\"The test sensitivity and specificity of Decision Trees are 26.58, 87.51 % \\n\",\"\\n\",\"The mean cross-validation accuracy for Random Forest is: 0.695 +/- 0.014\\n\",\"The test accuracy of Random Forest is 69.49 %\\n\",\"The test sensitivity and specificity of Random Forest are 27.28, 88.36 % \\n\",\"\\n\",\"The mean cross-validation accuracy for Naive Bayes is: 0.392 +/- 0.041\\n\",\"The test accuracy of Naive Bayes is 39.16 %\\n\",\"The test sensitivity and specificity of Naive Bayes are 28.87, 87.22 % \\n\",\"\\n\",\"The mean cross-validation accuracy for Perceptron is: 0.594 +/- 0.066\\n\",\"The test accuracy of Perceptron is 59.41 %\\n\",\"The test sensitivity and specificity of Perceptron are 25.54, 87.74 % \\n\",\"\\n\",\"The mean cross-validation accuracy for SGD is: 0.631 +/- 0.048\\n\",\"The test accuracy of SGD is 59.36 %\\n\",\"The test sensitivity and specificity of SGD are 29.74, 88.64 % \\n\",\"\\n\",\"The mean cross-validation accuracy of voting_classifier is: 0.694 +/- 0.014\\n\",\"Gradient Boosting Ensemble accuracy is   71.35 %\\n\",\"The test sensitivity and specificity of voting_classifier are 27.24, 88.30 % \\n\",\"\\n\",\"The mean cross-validation accuracy of Bootstrapping is: 0.694 +/- 0.014\\n\",\"The mean cross-validation accuracy of Pasting is: 0.694 +/- 0.014\\n\",\"Bootstrapping accuracy is   69.49 %\\n\",\"Pasting accuracy is   69.73 %\\n\",\"Bootstrapping sensitivity and specificity are 27.24, 88.11 %\\n\",\"Pasting sensitivity and specificity are 27.24, 88.33 % \\n\",\"\\n\",\"The mean cross-validation accuracy of Gradient Boosting classifier is: 0.695 +/- 0.015\\n\",\"Gradient Boosting Ensemble accuracy is   69.20 %\\n\",\"The test sensitivity and specificity of Gradient Boosting classifier are 30.58, 89.24 % \\n\",\"\\n\",\"The mean cross-validation accuracy of AdaBoost classifier is: 0.694 +/- 0.019\\n\",\"AdaBoost Ensemble accuracy is   69.35 %\\n\",\"AdaBoost sensitivity and specificity are 27.24, 88.22 % \\n\",\"\\n\",\"The mean cross-validation accuracy of Stacking classifier is: 0.687 +/- 0.015\\n\",\"Stacking Ensemble accuracy is   69.17 %\\n\",\"Stacking sensitivity and specificity are 26.67, 88.15 % \\n\",\"\\n\",\"The mean cross-validation accuracy of XGBoost classifier is: 0.703 +/- 0.013\\n\",\"XGBoost Ensemble accuracy is 70.2499 %\\n\",\"XGBoost sensitivity and specificity are 29.99, 89.24 % \\n\",\"\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"xfrom sklearn.ensemble import RandomForestClassifier\\n\",\"from sklearn.model_selection import RandomizedSearchCV\\n\",\"from scipy.stats import uniform, randint\\n\",\"\\n\",\"np.random.seed(0)\\n\",\"rf_model = RandomForestClassifier(random_state=123)\\n\",\"hyper_distributions = {\\n\",\"    'n_estimators': randint(20, 1000),\\n\",\"    'max_depth': randint(4, 200),\\n\",\"    'min_samples_leaf': randint(1, 1000),\\n\",\"}\\n\",\"random_search_2 = RandomizedSearchCV(rf_model, hyper_distributions, n_iter=20, scoring='accuracy')\\n\",\"results = random_search_2.fit(X1_train, y1_train)\\n\",\"print('Accuracy:',results.best_score_)\\n\",\"print('Hyperparameters:', results.best_params_)\"],\"metadata\":{\"id\":\"WpXpu8s8PJiA\"},\"execution_count\":null,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"from sklearn.model_selection import RandomizedSearchCV\\n\",\"# Number of trees in random forest\\n\",\"n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\\n\",\"# Number of features to consider at every split\\n\",\"max_features = ['auto', 'sqrt']\\n\",\"# Maximum number of levels in tree\\n\",\"max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\\n\",\"max_depth.append(None)\\n\",\"# Minimum number of samples required to split a node\\n\",\"min_samples_split = [2, 5, 10]\\n\",\"# Minimum number of samples required at each leaf node\\n\",\"min_samples_leaf = [1, 2, 4]\\n\",\"# Method of selecting samples for training each tree\\n\",\"bootstrap = [True, False]\\n\",\"# Create the random grid\\n\",\"random_grid = {'n_estimators': n_estimators,\\n\",\"               'max_features': max_features,\\n\",\"               'max_depth': max_depth,\\n\",\"               'min_samples_split': min_samples_split,\\n\",\"               'min_samples_leaf': min_samples_leaf,\\n\",\"               'bootstrap': bootstrap}\\n\",\"print(random_grid)\\n\",\"# Use the random grid to search for best hyperparameters\\n\",\"# First create the base model to tune\\n\",\"rf = RandomForestClassifier()\\n\",\"# Random search of parameters, using 3 fold cross validation, \\n\",\"# search across 100 different combinations, and use all available cores\\n\",\"rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\\n\",\"# Fit the random search model\\n\",\"rf_random.fit(X1_train, y1_train)\\n\",\"print('Accuracy:',rf_random.best_score_)\\n\",\"print('Hyperparameters:', rf_random.best_params_)\"],\"metadata\":{\"colab\":{\"base_uri\":\"https://localhost:8080/\"},\"id\":\"eT4nyXN_0iS6\",\"outputId\":\"092e2317-c5a5-41ba-d870-b99a339540c5\"},\"execution_count\":56,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":[\"{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_features': ['auto', 'sqrt'], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\\n\",\"Fitting 3 folds for each of 100 candidates, totalling 300 fits\\n\",\"Accuracy: 0.7261888681270027\\n\",\"Hyperparameters: {'n_estimators': 200, 'min_samples_split': 5, 'min_samples_leaf': 2, 'max_features': 'auto', 'max_depth': 90, 'bootstrap': False}\\n\"]}]},{\"cell_type\":\"code\",\"source\":[\"def _report(TN, FP, FN, TP):\\n\",\"    TPR = TP/(TP+FN) if (TP+FN)!=0 else 0\\n\",\"    TNR = TN/(TN+FP) if (TN+FP)!=0 else 0\\n\",\"    PPV = TP/(TP+FP) if (TP+FP)!=0 else 0\\n\",\"    report = {'TP': TP, 'TN': TN, 'FP': FP, 'FN': FN, \\n\",\"              'TPR': TPR, 'Recall': TPR, 'Sensitivity': TPR,\\n\",\"              'TNR' : TNR, 'Specificity': TNR,\\n\",\"              'FPR': FP/(FP+TN) if (FP+TN)!=0 else 0,\\n\",\"              'FNR': FN/(FN+TP) if (FN+TP)!=0 else 0,\\n\",\"              'PPV': PPV, 'Precision': PPV,\\n\",\"              'F1 Score': 2*(PPV*TPR)/(PPV+TPR)\\n\",\"             }\\n\",\"    return report\\n\",\"\\n\",\"def multi_classification_report(y_test, y_pred, labels=None, encoded_labels=True, as_frame=False):\\n\",\"    \\\"\\\"\\\"\\n\",\"    Args:\\n\",\"        y_true (ndarray)\\n\",\"        y_pred (ndarray)\\n\",\"        labels (list)\\n\",\"        encoded_labels (bool): Need to be False if labels are not one hot encoded\\n\",\"        as_fram (bool): If True, return type will be DataFrame\\n\",\"        \\n\",\"    Return:\\n\",\"        report (dict)\\n\",\"    \\\"\\\"\\\"\\n\",\"    \\n\",\"    import numpy as np\\n\",\"    import pandas as pd\\n\",\"    from sklearn.metrics import multilabel_confusion_matrix\\n\",\"    \\n\",\"    conf_labels = None if encoded_labels else labels\\n\",\"    \\n\",\"    conf_mat = multilabel_confusion_matrix(y_test, y_pred, labels=conf_labels)\\n\",\"    report = dict()\\n\",\"    if labels == None:\\n\",\"        counter = np.arange(len(conf_mat))\\n\",\"    else:\\n\",\"        counter = labels\\n\",\"        \\n\",\"    for i, name in enumerate(counter):\\n\",\"        TN, FP, FN, TP = conf_mat[i].ravel()\\n\",\"        report[name] = _report(TN, FP, FN, TP)\\n\",\"    \\n\",\"    if as_frame:\\n\",\"        return pd.DataFrame(report)\\n\",\"    return report\"],\"metadata\":{\"id\":\"4WGhbF9UIZo5\"},\"execution_count\":10,\"outputs\":[]},{\"cell_type\":\"code\",\"source\":[\"class_report=multi_classification_report(y2_test, rf_pred, encoded_labels=True, as_frame=True)\\n\",\"class_report\"],\"metadata\":{\"id\":\"LCxswsMMJmve\",\"colab\":{\"base_uri\":\"https://localhost:8080/\",\"height\":488},\"outputId\":\"c58163ef-709b-4832-93a7-9d4747e8bbd3\"},\"execution_count\":12,\"outputs\":[{\"output_type\":\"execute_result\",\"data\":{\"text/plain\":[\"                      0            1           2       3           4  \\\\\\n\",\"TP             1.000000     5.000000   36.000000     0.0  613.000000   \\n\",\"TN           994.000000  1006.000000  905.000000  1030.0  200.000000   \\n\",\"FP             1.000000     0.000000   18.000000     0.0  185.000000   \\n\",\"FN            37.000000    22.000000   74.000000     3.0   35.000000   \\n\",\"TPR            0.026316     0.185185    0.327273     0.0    0.945988   \\n\",\"Recall         0.026316     0.185185    0.327273     0.0    0.945988   \\n\",\"Sensitivity    0.026316     0.185185    0.327273     0.0    0.945988   \\n\",\"TNR            0.998995     1.000000    0.980498     1.0    0.519481   \\n\",\"Specificity    0.998995     1.000000    0.980498     1.0    0.519481   \\n\",\"FPR            0.001005     0.000000    0.019502     0.0    0.480519   \\n\",\"FNR            0.973684     0.814815    0.672727     1.0    0.054012   \\n\",\"PPV            0.500000     1.000000    0.666667     0.0    0.768170   \\n\",\"Precision      0.500000     1.000000    0.666667     0.0    0.768170   \\n\",\"F1 Score       0.050000     0.312500    0.439024     NaN    0.847856   \\n\",\"\\n\",\"                      5  \\n\",\"TP           113.000000  \\n\",\"TN           765.000000  \\n\",\"FP            61.000000  \\n\",\"FN            94.000000  \\n\",\"TPR            0.545894  \\n\",\"Recall         0.545894  \\n\",\"Sensitivity    0.545894  \\n\",\"TNR            0.926150  \\n\",\"Specificity    0.926150  \\n\",\"FPR            0.073850  \\n\",\"FNR            0.454106  \\n\",\"PPV            0.649425  \\n\",\"Precision      0.649425  \\n\",\"F1 Score       0.593176  \"],\"text/html\":[\"\\n\",\"  <div id=\\\"df-693b270e-2efe-4802-829b-3fc68b611d4d\\\">\\n\",\"    <div class=\\\"colab-df-container\\\">\\n\",\"      <div>\\n\",\"<style scoped>\\n\",\"    .dataframe tbody tr th:only-of-type {\\n\",\"        vertical-align: middle;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe tbody tr th {\\n\",\"        vertical-align: top;\\n\",\"    }\\n\",\"\\n\",\"    .dataframe thead th {\\n\",\"        text-align: right;\\n\",\"    }\\n\",\"</style>\\n\",\"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\"  <thead>\\n\",\"    <tr style=\\\"text-align: right;\\\">\\n\",\"      <th></th>\\n\",\"      <th>0</th>\\n\",\"      <th>1</th>\\n\",\"      <th>2</th>\\n\",\"      <th>3</th>\\n\",\"      <th>4</th>\\n\",\"      <th>5</th>\\n\",\"    </tr>\\n\",\"  </thead>\\n\",\"  <tbody>\\n\",\"    <tr>\\n\",\"      <th>TP</th>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>5.000000</td>\\n\",\"      <td>36.000000</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>613.000000</td>\\n\",\"      <td>113.000000</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>TN</th>\\n\",\"      <td>994.000000</td>\\n\",\"      <td>1006.000000</td>\\n\",\"      <td>905.000000</td>\\n\",\"      <td>1030.0</td>\\n\",\"      <td>200.000000</td>\\n\",\"      <td>765.000000</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>FP</th>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>0.000000</td>\\n\",\"      <td>18.000000</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>185.000000</td>\\n\",\"      <td>61.000000</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>FN</th>\\n\",\"      <td>37.000000</td>\\n\",\"      <td>22.000000</td>\\n\",\"      <td>74.000000</td>\\n\",\"      <td>3.0</td>\\n\",\"      <td>35.000000</td>\\n\",\"      <td>94.000000</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>TPR</th>\\n\",\"      <td>0.026316</td>\\n\",\"      <td>0.185185</td>\\n\",\"      <td>0.327273</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.945988</td>\\n\",\"      <td>0.545894</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>Recall</th>\\n\",\"      <td>0.026316</td>\\n\",\"      <td>0.185185</td>\\n\",\"      <td>0.327273</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.945988</td>\\n\",\"      <td>0.545894</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>Sensitivity</th>\\n\",\"      <td>0.026316</td>\\n\",\"      <td>0.185185</td>\\n\",\"      <td>0.327273</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.945988</td>\\n\",\"      <td>0.545894</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>TNR</th>\\n\",\"      <td>0.998995</td>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>0.980498</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>0.519481</td>\\n\",\"      <td>0.926150</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>Specificity</th>\\n\",\"      <td>0.998995</td>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>0.980498</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>0.519481</td>\\n\",\"      <td>0.926150</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>FPR</th>\\n\",\"      <td>0.001005</td>\\n\",\"      <td>0.000000</td>\\n\",\"      <td>0.019502</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.480519</td>\\n\",\"      <td>0.073850</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>FNR</th>\\n\",\"      <td>0.973684</td>\\n\",\"      <td>0.814815</td>\\n\",\"      <td>0.672727</td>\\n\",\"      <td>1.0</td>\\n\",\"      <td>0.054012</td>\\n\",\"      <td>0.454106</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>PPV</th>\\n\",\"      <td>0.500000</td>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>0.666667</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.768170</td>\\n\",\"      <td>0.649425</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>Precision</th>\\n\",\"      <td>0.500000</td>\\n\",\"      <td>1.000000</td>\\n\",\"      <td>0.666667</td>\\n\",\"      <td>0.0</td>\\n\",\"      <td>0.768170</td>\\n\",\"      <td>0.649425</td>\\n\",\"    </tr>\\n\",\"    <tr>\\n\",\"      <th>F1 Score</th>\\n\",\"      <td>0.050000</td>\\n\",\"      <td>0.312500</td>\\n\",\"      <td>0.439024</td>\\n\",\"      <td>NaN</td>\\n\",\"      <td>0.847856</td>\\n\",\"      <td>0.593176</td>\\n\",\"    </tr>\\n\",\"  </tbody>\\n\",\"</table>\\n\",\"</div>\\n\",\"      <button class=\\\"colab-df-convert\\\" onclick=\\\"convertToInteractive('df-693b270e-2efe-4802-829b-3fc68b611d4d')\\\"\\n\",\"              title=\\\"Convert this dataframe to an interactive table.\\\"\\n\",\"              style=\\\"display:none;\\\">\\n\",\"        \\n\",\"  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24px\\\"viewBox=\\\"0 0 24 24\\\"\\n\",\"       width=\\\"24px\\\">\\n\",\"    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n\",\"    <path d=\\\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\\\"/><path d=\\\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\\\"/>\\n\",\"  </svg>\\n\",\"      </button>\\n\",\"      \\n\",\"  <style>\\n\",\"    .colab-df-container {\\n\",\"      display:flex;\\n\",\"      flex-wrap:wrap;\\n\",\"      gap: 12px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert {\\n\",\"      background-color: #E8F0FE;\\n\",\"      border: none;\\n\",\"      border-radius: 50%;\\n\",\"      cursor: pointer;\\n\",\"      display: none;\\n\",\"      fill: #1967D2;\\n\",\"      height: 32px;\\n\",\"      padding: 0 0 0 0;\\n\",\"      width: 32px;\\n\",\"    }\\n\",\"\\n\",\"    .colab-df-convert:hover {\\n\",\"      background-color: #E2EBFA;\\n\",\"      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\\n\",\"      fill: #174EA6;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert {\\n\",\"      background-color: #3B4455;\\n\",\"      fill: #D2E3FC;\\n\",\"    }\\n\",\"\\n\",\"    [theme=dark] .colab-df-convert:hover {\\n\",\"      background-color: #434B5C;\\n\",\"      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\\n\",\"      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\\n\",\"      fill: #FFFFFF;\\n\",\"    }\\n\",\"  </style>\\n\",\"\\n\",\"      <script>\\n\",\"        const buttonEl =\\n\",\"          document.querySelector('#df-693b270e-2efe-4802-829b-3fc68b611d4d button.colab-df-convert');\\n\",\"        buttonEl.style.display =\\n\",\"          google.colab.kernel.accessAllowed ? 'block' : 'none';\\n\",\"\\n\",\"        async function convertToInteractive(key) {\\n\",\"          const element = document.querySelector('#df-693b270e-2efe-4802-829b-3fc68b611d4d');\\n\",\"          const dataTable =\\n\",\"            await google.colab.kernel.invokeFunction('convertToInteractive',\\n\",\"                                                     [key], {});\\n\",\"          if (!dataTable) return;\\n\",\"\\n\",\"          const docLinkHtml = 'Like what you see? Visit the ' +\\n\",\"            '<a target=\\\"_blank\\\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\\n\",\"            + ' to learn more about interactive tables.';\\n\",\"          element.innerHTML = '';\\n\",\"          dataTable['output_type'] = 'display_data';\\n\",\"          await google.colab.output.renderOutput(dataTable, element);\\n\",\"          const docLink = document.createElement('div');\\n\",\"          docLink.innerHTML = docLinkHtml;\\n\",\"          element.appendChild(docLink);\\n\",\"        }\\n\",\"      </script>\\n\",\"    </div>\\n\",\"  </div>\\n\",\"  \"]},\"metadata\":{},\"execution_count\":12}]},{\"cell_type\":\"code\",\"source\":[\"import matplotlib.pyplot as plt\\n\",\"from sklearn.metrics import plot_confusion_matrix\\n\",\"\\n\",\"disp = plot_confusion_matrix(rf_model, X2_test, y2_test,\\n\",\"                                 #display_labels=class_names,\\n\",\"                                 cmap=plt.cm.Blues)\\n\",\"plt.show()\"],\"metadata\":{\"id\":\"X0TKGqHLuiMM\"},\"execution_count\":null,\"outputs\":[]}]}",
  "lang" : "jupyter",
  "owner" : "111111",
  "confidential" : "FALSE"
}]
